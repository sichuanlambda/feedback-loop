<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Score Your "Viral" Tweet</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Optional: jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <!-- Optional: Popper JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-M4TLZ8N6CC"></script>
    <script defer data-domain="architecturehelper.com" src="https://plausible.io/js/script.js"></script>

    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'G-M4TLZ8N6CC');
    </script>
    <style>
        body {
            background: #E8E8E8; /* Light blue background similar to the screenshot */
            font-family: 'Arial', sans-serif; /* Clean, sans-serif font */
            color: #01161e; /* Dark blue text */
        }
        @keyframes gradientBG {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        .animated-gradient {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
        }
        .navbar {
            background: #333;
            border-bottom: 3px solid #eff6e0;
        }
        .container {
            background: #FFFFFF; /* White container background */
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
            margin-top: 50px;
            margin-bottom: 50px;
        }
        .gpt-form-container {
            background-color: #FFFFFF; /* White form background */
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .btn-primary {
            background-color: #0056b3; /* Blue button background */
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            font-size: 18px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background-color: #004080; /* Darker blue on hover */
            box-shadow: 0 4px 6px rgba(0,0,0,0.15);
        }
        .btn-primary.disabled, .btn-primary:disabled, .btn btn-primary btn-block {
            background-color: #598392; 
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            font-size: 18px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        .form-control {
            border-radius: 20px;
            font-size: 16px;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1); /* Slight inset shadow for depth */
        }
        .gpt-answer-container {
            background: #FFFFFF; /* A white background */
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 5px;
            font-size: 16px;
            display: none; /* Initially hidden */
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .btn-small {
            padding: 2px 5px;
            font-size: 5px;
        }
        .loader {
            border: 5px solid #f3f3f3; /* Light loader ring */
            border-radius: 50%;
            border-top: 5px solid #0056b3; /* Blue loader top */
            width: 50px;
            height: 50px;
            -webkit-animation: spin 2s linear infinite;
            animation: spin 2s linear infinite;
            margin: auto;
            display: none; /* Initially hidden */
        }
        @-webkit-keyframes spin {
            0% { -webkit-transform: rotate(0deg); }
            100% { -webkit-transform: rotate(360deg); }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

<div class="container" style="background: #FFFFFF; border-radius: 15px; box-shadow: 0px 0px 0px rgba(0, 0, 0, 0.1);">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="text-center">
                <h1 class="mt-5" style="color: #01161e;"> Welcome to the Roastery</h1>
                <p style="color: #01161e;">Paste in your supposedly "viral" tweet, and we'll see just how true that is...</p>
            </div>
            <div class="gpt-form-container">
            <%= form_with url: ask_gpt_path, method: :post, id: "gpt-form", local: false do |form| %>
                <div class="form-group">
                    <%= text_area_tag :question, nil, placeholder: "Wen lambo to the moon ðŸš€ðŸ¤”", class: "form-control", rows: 4 %>
                </div>
                <%= submit_tag "Check it ðŸ”¥", class: "btn btn-primary btn-block" %>
            <% end %>
        </div>
        <div id="gpt-answer" class="gpt-answer-container">
            <div class="loader"></div>
            <div id="response-text"></div>
            <img id="response-gif" src="https://media.tenor.com/j78-Owc0WLQAAAAi/oooo-oo.gif" style="display: none; position: absolute; right: -100px; top: 0;" alt="Response GIF">

            <%= form_with model: @feedback, url: feedbacks_path, local: true, id: 'feedback-form' do |form| %>
                <div id="feedback-selection" class="feedback-selection">
                    <%= form.button type: 'submit', class: 'btn btn-small', name: 'feedback[vote]', value: 'true', style: 'padding: 5px 10px; font-size: 12px; background-color: grey; border-color: grey; color: white;' do %>
                        <i class="fas fa-thumbs-up custom-icon" style="font-size: 12px; color: white;"></i>
                    <% end %>

                    <%= form.button type: 'submit', class: 'btn btn-small', name: 'feedback[vote]', value: 'false', style: 'padding: 5px 10px; font-size: 12px; background-color: grey; border-color: grey; color: white;' do %>
                        <i class="fas fa-thumbs-down custom-icon" style="font-size: 12px; color: white;"></i>
                    <% end %>
                </div>
            <% end %>


        </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('gpt-form');
  const loader = document.querySelector('.loader');
  const responseText = document.getElementById('response-text');
  const answerContainer = document.getElementById('gpt-answer');
  const responseGif = document.getElementById('response-gif'); // Get the response GIF element
  const thumbsUpButtonRoastery = document.getElementById('thumbs-up-roastery');
  const thumbsDownButtonRoastery = document.getElementById('thumbs-down-roastery');
      if (thumbsUpButtonRoastery) {
        thumbsUpButtonRoastery.addEventListener('click', function() {
            // Implement logic for thumbs up (e.g., sending data to the server)
        });
    }

    if (thumbsDownButtonRoastery) {
        thumbsDownButtonRoastery.addEventListener('click', function() {
            // Implement logic for thumbs down (e.g., sending data to the server)
        });
    }
  function fetchWithRetry(url, options, retries, delay) {
    return fetch(url, options)
      .then(response => {
        if (!response.ok && retries > 0) {
          return new Promise(resolve => setTimeout(resolve, delay))
            .then(() => fetchWithRetry(url, options, retries - 1, delay));
        } else {
          return response.json(); // Or handle non-OK responses if needed
        }
      })
      .catch(error => {
        if (retries > 0) {
          return new Promise(resolve => setTimeout(resolve, delay))
            .then(() => fetchWithRetry(url, options, retries - 1, delay));
        } else {
          throw error;
        }
      });
  }

  form.addEventListener('submit', (event) => {
    event.preventDefault();
    loader.style.display = 'block';
    responseText.textContent = ''; // Clear previous response text
    responseGif.style.display = 'none'; // Ensure the GIF is hidden each time the form is submitted
    answerContainer.style.display = 'block'; // Show container

    const formData = new FormData(form);
    let question = formData.get('question');

    const additionalContent = "Roast my tweet about its virality potential using gen z slang, unless the tweet has relative viral potential, the response should more make fun of the tweet in gen z slang";
    question = additionalContent + " " + question;

    const fetchOptions = {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector("[name='csrf-token']").content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ prompt: question })
    };

    fetchWithRetry('/ask_gpt', fetchOptions, 5, 1000) // 5 retries, 1000 ms delay
      .then(data => {
        loader.style.display = 'none';
        if (data.text) {
          responseText.textContent = data.text;
          responseGif.style.display = 'block';
          responseGif.style.right = '10px';
          setTimeout(() => {
            responseGif.style.display = 'none';
          }, 7000); // 7000 milliseconds = 7 seconds
        } else {
          responseText.textContent = 'No response or error received';
        }
      })
      .catch(error => {
        loader.style.display = 'none';
        responseText.textContent = 'Error: Unable to fetch response after retries.';
        console.error('Error:', error);
      });
  });
});
</script>

</body>
</html>