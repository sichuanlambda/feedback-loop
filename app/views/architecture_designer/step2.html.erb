<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Validator - Home</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Custom styles */
        .container{
            padding: 40px 0;
            width: 75%; /* Full width of the column */
        }
        .btn-primary{
            width: 30%; /* Make buttons take full width of the container */
            background-color: #0056b3;
            color: white;
            border-radius: 20px;
            padding: 10px 20px;
            font-size: 18px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: none;
        }
        .btn-primary:hover {
            background-color: #004080; /* Darker blue on hover */
        }
        .button-group {
            position: relative; /* Relative positioning for the container */
            display: flex;
            justify-content: center; /* Center the content (primarily for the 'Next' button) */
            align-items: center;
            width: 100%;
        }
        .btn-secondary {
            position: absolute; /* Absolute positioning for the 'Back' button */
            left: 0; /* Align to the left */
            border-radius: 20px;
            padding: 10px 20px;
            /* ... other existing styles ... */
        }
        .option-btn {
            border: 2px solid #0056b3; /* Primary color border */
            background-color: white;
            color: grey;
            margin: 5px;
            padding: 10px 15px;
            border-radius: 20px;
            transition: background-color 0.3s, color 0.3s;
        }

        .option-btn.active {
            background-color: #0056b3; /* Change to primary color for active state */
            color: white;
            transform: scale(1.05); /* Slightly increase the size */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .landing-section {
            padding: 40px 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .landing-section img {
            width: 50%; /* Reduced image size by about 50% */
            border-radius: 20px;
        }
        .feature-card {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            background: white;
            min-height: 200px;
            margin-bottom: 30px; /* Reduced space between cards */
        }
        .feature-card .row {
            margin-left: 0; /* Reset row margin */
            margin-right: 0; /* Reset row margin */
        }

        .feature-card .card-img {
            width: 100%; /* Full width of the column */
            margin-right: 0; /* Reset margin right */
            padding-right: 0; /* Reset padding right */
            /* Adjust image size as needed */
        }

        .card-content {
            flex-grow: 1;
            text-align: center;
            padding: 15px; /* Reduced padding */
        }

        .card-content h3 {
            font-size: 1.25rem; /* Adjust headline font size if needed */
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .card-content p {
            font-size: 0.9rem; /* Reduced font size */
            margin-bottom: 0.5rem; /* Reduced bottom margin */
            padding: 20px;
        }

        .stat {
            padding: 15px; /* Reduced padding */
            display: flex;
            flex-direction: column;
            justify-content: center; /* Center stat vertically */
            padding: 20px;
        }

        .metric-number {
            font-size: 1.5rem; /* Adjusted for space */
        }

        .metric-description {
            font-size: 0.9rem; /* Reduced font size */
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .feature-card {
                flex-direction: column;
            }

            .feature-card .card-img,
            .card-content,
            .stat {
                width: 100%; /* Full width on smaller screens */
            }

            .card-content h3 {
                font-size: 1.2rem; /* Adjusted for smaller screens */
                white-space: normal; /* Allow wrapping on small screens */
            }
        }
           body {
        background-color: #E8E8E8; /* Sets the entire page background to black */
        }
        h1 {
            font-size: 48px;
            color: black;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <%= form_with url: '/architecture_designer/step3', method: :get, id: 'step2_form' do |form| %>

            <!-- Primary Inspiration Section -->
            <div class="feature-card">
                <div class="card-content text-center">
                    <h3>Primary Inspiration</h3>
                    <% ['Futuristic/Sci-fi', 'Historical (e.g., Gothic, Romanesque)', 'Natural/Environmental', 'Abstract/Artistic', 'Industrial/Urban', 'Classical/Renaissance', 'Minimalist/Modern', 'Art Nouveau/Art Deco', 'Rustic/Country', 'Coastal/Mediterranean', 'Bohemian/Eclectic', 'Traditional/Colonial'].each do |option| %>
                        <button type="button" class="btn option-btn" data-value="primary_inspiration_<%= option %>"><%= option %></button>
                    <% end %>
                </div>
            </div>

            <!-- Dominant Material Section -->
            <div class="feature-card">
                <div class="card-content text-center">
                    <h3>Dominant Material</h3>
                    <% ['Glass and Steel', 'Brick and Stone', 'Wood and Natural Fibers', 'Concrete and Metal', 'Plaster and Ceramic', 'Copper and Bronze', 'Aluminum and Plastic', 'Bamboo and Rattan', 'Fabric and Textile', 'Recycled Materials', 'Terracotta and Clay', 'Composite Materials'].each do |option| %>
                        <button type="button" class="btn option-btn" data-value="dominant_material_<%= option %>"><%= option %></button>
                    <% end %>
                </div>
            </div>

            <!-- Color Palette Section -->
            <div class="feature-card">
                <div class="card-content text-center">
                    <h3>Color Palette</h3>
                    <% ['Monochromatic and Neutral', 'Earth Tones and Warm Colors', 'Bold and Vibrant Colors', 'Pastel and Soft Colors', 'Black, White, and Grey', 'Metallics (Gold, Silver, Copper)', 'Jewel Tones (Ruby, Emerald, Sapphire)', 'Primary Colors (Red, Blue, Yellow)', 'Neon and Electric', 'Cool Tones (Blues, Greens, Purples)', 'Muted and Desaturated', 'Bright and Cheerful'].each do |option| %>
                        <button type="button" class="btn option-btn" data-value="color_palette_<%= option %>"><%= option %></button>
                    <% end %>
                </div>
            </div>

            <!-- Form and Structure Section -->
            <div class="feature-card">
                <div class="card-content text-center">
                    <h3>Form and Structure</h3>
                    <% ['Geometric and Angular', 'Curved and Organic', 'Asymmetrical and Unconventional', 'Symmetrical and Traditional', 'Modular and Prefabricated', 'Freeform and Sculptural', 'Layered and Stacked', 'Streamlined and Aerodynamic', 'Compact and Efficient', 'Expansive and Open', 'Multi-level and Terraced', 'Interlocking and Overlapping'].each do |option| %>
                        <button type="button" class="btn option-btn" data-value="form_structure_<%= option %>"><%= option %></button>
                    <% end %>
                </div>
            </div>

            <!-- Decorative Elements Section -->
            <div class="feature-card">
                <div class="card-content text-center">
                    <h3>Decorative Elements</h3>
                    <% ['Minimalist and Functional', 'Ornate and Detailed', 'Naturalistic and Themed', 'Abstract and Symbolic', 'Vintage and Retro', 'Handmade and Artisan', 'Luxurious and Glamorous', 'Industrial and Raw', 'Whimsical and Playful', 'Cultural and Ethnic', 'Nautical and Coastal', 'Botanical and Floral'].each do |option| %>
                        <button type="button" class="btn option-btn" data-value="decorative_elements_<%= option %>"><%= option %></button>
                    <% end %>
                </div>
            </div>

            <!-- Button Group for navigation -->
            <div class="button-group">
                <%= link_to 'Back', '/architecture_designer/step1', class: 'btn btn-secondary' %>
                <%= form.submit 'Next', class: 'btn btn-primary' %>
            </div>

        <% end %>
    </div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const optionButtons = document.querySelectorAll('.option-btn');

        // Restore state if there's any saved in localStorage
        restoreState();

        optionButtons.forEach(function (btn) {
            btn.addEventListener('click', function () {
                this.classList.toggle('active');
                updateSelectedOptions(this.closest('.feature-card'));
            });
        });

        function updateSelectedOptions(featureCard) {
            let selectedOptions = Array.from(featureCard.querySelectorAll('.option-btn.active'))
                .map(btn => btn.getAttribute('data-value').split('_').pop());
            let key = 'selected_options_' + featureCard.querySelector('.card-content h3').textContent.replace(/\s+/g, '_');
            localStorage.setItem(key, JSON.stringify(selectedOptions));
        }

        // Restore the state from localStorage
        function restoreState() {
            document.querySelectorAll('.feature-card').forEach(featureCard => {
                let key = 'selected_options_' + featureCard.querySelector('.card-content h3').textContent.replace(/\s+/g, '_');
                let savedOptions = JSON.parse(localStorage.getItem(key));
                if (savedOptions) {
                    featureCard.querySelectorAll('.option-btn').forEach(btn => {
                        if (savedOptions.includes(btn.getAttribute('data-value').split('_').pop())) {
                            btn.classList.add('active');
                        }
                    });
                }
            });
        }
    });
</script>
</body>
</html>
