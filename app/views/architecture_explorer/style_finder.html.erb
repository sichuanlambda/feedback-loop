<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Architecture Style Finder</title>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-M4TLZ8N6CC"></script>
    <script defer data-domain="app.architecturehelper.com" src="https://plausible.io/js/script.js"></script>
    <script>
        !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
        posthog.init('phc_MltKSavY2s3FENOZhvocfU5qHx4f8xsJTAku0H0jVLH',{api_host:'https://app.posthog.com'})
    </script>
</head>
<body>


<div class="container-fluid px-4">
  <div class="text-center mb-4">
    <h1 class="mb-2">Architecture Style Finder</h1>
    <p class="text-muted mb-0">Like the buildings that resonate with you to discover your architectural style profile</p>
  </div>
  
  <% user_signed_in = user_signed_in? %>
  <% user_has_active_subscription = user_signed_in && current_user.subscription_status == 'active' %>
  
  <div class="row">
    <div class="col-lg-9">
      <div id="image-gallery" class="row">
        <% BuildingAnalysis.where(visible_in_library: true).order("RANDOM()").limit(30).each do |building| %>
          <div class="col-lg-3 col-md-4 col-sm-6 mb-3">
            <div class="card h-100 building-card">
              <div class="square-image-container">
                <img src="<%= building.image_url %>" class="card-img-top square-image" alt="Building Image" data-building-id="<%= building.id %>" data-styles="<%= building.h3_contents.to_json %>">
                <button class="btn btn-outline-primary select-image" 
                        data-building-id="<%= building.id %>" 
                        data-styles="<%= building.h3_contents.to_json %>"
                        title="Like this architectural style"
                        onclick="console.log('Raw h3_contents for building <%= building.id %>:', <%= raw building.h3_contents.to_json %>)">
                  <i class="far fa-heart"></i>
                </button>
              </div>
            </div>
          </div>

          <!-- Modal for each image -->
          <div class="modal fade" id="imageModal<%= building.id %>" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel<%= building.id %>" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="imageModalLabel<%= building.id %>">Building Details</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <img src="<%= building.image_url %>" class="img-fluid mb-3" alt="Building Image">
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
    
    <div class="col-lg-3">
      <div class="card sticky-top" style="top: 80px; z-index: 10;">
        <div class="card-body p-3">
          <h6 class="card-title mb-2">Build Your Style Profile</h6>
          <p class="text-muted small mb-3">Like at least 3 buildings to discover your style</p>
          <div id="selection-counter" class="mb-3 p-2 bg-light rounded text-center">
            <h4 class="mb-1"><span id="count-number">0</span></h4>
            <small class="text-muted">buildings selected</small>
          </div>
          <button id="analyze-button" class="btn btn-primary btn-block" disabled>
            <i class="fas fa-magic mr-1"></i> Analyze My Style
          </button>
          <button id="re-analyze-button" class="btn btn-outline-primary btn-block mt-2" style="display: none;">
            <i class="fas fa-redo mr-1"></i> Re-analyze
          </button>
          
          <hr class="my-3">
          
          <div class="text-center">
            <small class="text-muted">Analyze a specific building?</small>
            <a href="/architecture_explorer/address_search" class="btn btn-outline-secondary btn-sm btn-block mt-2">
              <i class="fas fa-camera mr-1"></i> Upload Photo
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Style Profile Modal -->
<div class="modal fade" id="styleProfileModal" tabindex="-1" role="dialog" aria-labelledby="styleProfileModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="styleProfileModalLabel">Your Architectural Style Profile</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div id="modal-style-summary" class="text-center mb-4">
          <!-- Profile content will be inserted here -->
        </div>
        <div id="selected-buildings-preview" class="mb-4" style="display: none;">
          <h6 class="mb-3">Your Selected Buildings:</h6>
          <div class="row" id="selected-buildings-grid">
            <!-- Selected building thumbnails will be inserted here -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <!-- Generate Building button - top right -->
        <div class="position-absolute" style="top: 1.25rem; right: 1.25rem;">
          <button id="generate-image-modal-btn" class="btn btn-primary" style="display: none;">Generate Building</button>
        </div>
        
        <!-- Centered content -->
        <div class="text-center w-100">
          <!-- View Tour button -->
          <div class="mb-3">
            <button id="view-tour-btn" class="btn btn-outline-primary" style="display: none;">
              <i class="fas fa-route mr-1"></i> View Style Tour
            </button>
          </div>
          
          <!-- Share section -->
          <div>
            <div class="d-flex align-items-center justify-content-center">
              <span class="text-muted small mr-2">Share</span>
              <div class="btn-group" role="group">
                <button id="share-twitter-btn" class="btn btn-outline-secondary btn-sm" title="Share on Twitter">
                  <i class="fab fa-twitter"></i>
                </button>
                <button id="share-facebook-btn" class="btn btn-outline-secondary btn-sm" title="Share on Facebook">
                  <i class="fab fa-facebook-f"></i>
                </button>
                <button id="share-linkedin-btn" class="btn btn-outline-secondary btn-sm" title="Share on LinkedIn">
                  <i class="fab fa-linkedin-in"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Virtual Tour Modal -->
<div class="modal fade" id="virtualTourModal" tabindex="-1" aria-labelledby="virtualTourModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <div class="modal-header-content">
          <h5 class="modal-title text-center" id="virtualTourModalLabel">
            <i class="fas fa-vr-cardboard"></i> Virtual Style Tour
          </h5>
          <div class="tour-counter">
            <span id="tour-counter">1 / 1</span>
          </div>
          <div class="building-address-inline" id="building-address-inline">
            <span id="current-building-address-inline">Building Address</span>
          </div>
        </div>
        <button type="button" class="btn-close" id="end-tour-btn" aria-label="End Tour">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-body">
        <div class="virtual-tour-container">
          <!-- Building Content Container -->
          <div class="building-content-container" id="building-content-container">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" id="prev-building-btn" disabled>
          <i class="fas fa-chevron-left"></i> Previous
        </button>
        <button type="button" class="btn btn-outline-secondary" id="next-building-btn">
          Next <i class="fas fa-chevron-right"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Fullscreen Image Modal -->
<div class="modal fade" id="fullscreenImageModal" tabindex="-1" aria-labelledby="fullscreenImageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="fullscreenImageModalLabel">Building Image</h5>
        <button type="button" class="btn-close" id="close-fullscreen-btn" aria-label="Close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <div class="modal-body d-flex align-items-center justify-content-center p-0">
        <img id="fullscreen-image" src="" alt="Building" class="img-fluid" style="max-height: 90vh; max-width: 100%; object-fit: contain;">
      </div>
    </div>
  </div>
</div>

<style>
  .square-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%; /* 1:1 Aspect Ratio */
    overflow: hidden;
  }
  .square-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    cursor: pointer;
    transition: transform 0.3s ease;
  }
  .square-image:hover {
    transform: scale(1.05);
  }
  .building-card {
    transition: box-shadow 0.3s ease;
    border: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  .building-card:hover {
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    transform: translateY(-2px);
  }
  #selected-styles {
    background-color: #f0f0f0;
    padding: 10px;
    margin-top: 10px;
  }
  #style-summary {
    background: linear-gradient(135deg, #f5f7fa 0%, #e9ecef 100%);
    border-left: 4px solid #0056b3;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
    padding: 1rem !important;
  }
  #style-summary:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  #style-summary h5 {
    margin-bottom: 0.5rem !important;
  }
  #style-summary p {
    color: #495057;
  }
  .progress {
    height: 22px;
    background-color: #e9ecef;
  }
  .progress-bar {
    background-color: #0056b3;
    font-size: 0.875rem;
  }
  .select-image {
    font-size: 0.9rem;
    padding: 6px 8px;
    border-radius: 20px;
    transition: all 0.2s ease;
    border-width: 1px;
    position: absolute;
    top: 8px;
    right: 8px;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  .select-image:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 12px rgba(0,0,0,0.2);
  }
  .select-image.btn-primary {
    background-color: rgba(220, 53, 69, 0.95);
    border-color: #dc3545;
    color: white;
  }
  .select-image.btn-outline-primary {
    color: #6c757d;
    border-color: rgba(222, 226, 230, 0.8);
    background: rgba(255, 255, 255, 0.9);
  }
  .select-image.btn-outline-primary:hover {
    color: #dc3545;
    border-color: #dc3545;
    background: rgba(255, 255, 255, 0.95);
  }

  /* Virtual Tour Styles */
  .virtual-tour-container {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .building-content-container {
    flex: 1;
    display: flex;
    gap: 30px;
    min-height: 0;
    overflow-y: auto;
    padding: 0;
    position: relative;
  }

  .building-content-container > * {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .building-content-container.loading > * {
    opacity: 0.7;
    transform: translateX(10px);
  }

  .building-analysis-section {
    flex: 1;
    background: #f8f9fa;
    border-radius: 10px;
    padding: 25px;
    overflow-y: auto;
    min-height: 0;
  }

  .building-analysis-content {
    line-height: 1.7;
    color: #333;
    font-size: 0.95rem;
  }

  .building-analysis-content h3 {
    color: #007bff;
    font-size: 1.1rem;
    margin: 20px 0 10px 0;
    font-weight: 600;
  }

  .building-image-section {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .building-image-container {
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    position: relative;
    transition: transform 0.2s ease;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .building-image-container img {
    width: 100%;
    flex: 1;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .building-image-container:hover .image-overlay {
    opacity: 1;
  }

  .image-overlay i {
    color: white;
    font-size: 2rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .building-styles-overlay {
    position: absolute;
    bottom: 15px;
    right: 15px;
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    max-width: 80%;
    z-index: 10;
  }

  .style-badge-tour {
    background: rgba(255, 255, 255, 0.95);
    color: #495057;
    padding: 6px 10px;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 500;
    border: 1px solid rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .tour-counter {
    background: #007bff;
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .modal-header-content {
    display: flex;
    align-items: center;
    gap: 20px;
    flex: 1;
  }

  .modal-header-content .modal-title {
    margin: 0;
    white-space: nowrap;
  }

  .building-address-inline {
    color: #495057;
    font-weight: 500;
    font-size: 0.95rem;
    flex: 1;
    text-align: center;
  }

  #end-tour-btn {
    background: none;
    border: none;
    color: #6c757d;
    font-size: 1.2rem;
    padding: 8px;
    border-radius: 50%;
    transition: all 0.2s ease;
  }

  #end-tour-btn:hover {
    background: #f8f9fa;
    color: #495057;
  }

  /* Modal adjustments */
  #virtualTourModal .modal-dialog {
    max-width: 95vw;
    max-height: 95vh;
    margin: 2.5vh auto;
  }

  #virtualTourModal .modal-content {
    max-height: 95vh;
    display: flex;
    flex-direction: column;
    height: 90vh;
  }

  #virtualTourModal .modal-body {
    flex: 1;
    overflow: auto;
    padding: 20px;
  }

  /* Fullscreen Image Modal Styles */
  #fullscreenImageModal .modal-dialog {
    max-width: 100vw;
    max-height: 100vh;
    margin: 0;
    width: 100vw;
    height: 100vh;
  }

  #fullscreenImageModal .modal-content {
    height: 100vh;
    border-radius: 0;
    border: none;
  }

  #fullscreenImageModal .modal-body {
    flex: 1;
    padding: 0;
    background: #000;
  }

  #fullscreen-image {
    max-height: 100vh !important;
    max-width: 100vw !important;
    width: auto;
    height: auto;
    object-fit: contain;
  }

  /* Modal footer styling */
  #styleProfileModal .modal-footer {
    padding: 1.25rem;
    border-top: 1px solid #dee2e6;
    background-color: #f8f9fa;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .container-fluid {
      padding-left: 1rem !important;
      padding-right: 1rem !important;
    }
    
    .col-lg-9, .col-lg-3 {
      margin-bottom: 2rem;
    }
    
    #image-gallery .col-lg-3 {
      margin-bottom: 1rem;
    }
    
    .building-card:hover {
      transform: none;
    }
    
    .select-image {
      font-size: 1rem;
      padding: 8px 10px;
    }
    
    /* Mobile adjustments for modal footer */
    #styleProfileModal .modal-footer .position-absolute {
      position: static !important;
      margin-bottom: 1rem;
    }
  }
</style>

<!-- Bootstrap JavaScript for Virtual Tour -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded');
    const selectedBuildings = new Map();
    const selectButtons = document.querySelectorAll('.select-image');
    const analyzeButton = document.getElementById('analyze-button');
    const reAnalyzeButton = document.getElementById('re-analyze-button');
    const selectedStylesDiv = document.getElementById('selected-styles');
    const generatedImageDiv = document.getElementById('generated-image');
    const generateNewImageButton = document.getElementById('generate-new-image');
    
    console.log('Analyze button found:', analyzeButton);
    console.log('Selected styles div found:', selectedStylesDiv);

    if (analyzeButton) {
      analyzeButton.addEventListener('click', function() {
        console.log('Analyze button clicked');
        if (!selectedBuildings || selectedBuildings.size === 0) {
          console.error('No buildings selected');
          alert('Please select at least one building before analyzing.');
          return;
        }
        analyzeMyStyle();
        // Hide the analyze button and show the re-analyze button
        analyzeButton.style.display = 'none';
        reAnalyzeButton.style.display = 'block';
      });
    } else {
      console.error('Analyze button not found!');
    }

    if (reAnalyzeButton) {
      reAnalyzeButton.addEventListener('click', function() {
        console.log('Re-analyze button clicked');
        analyzeMyStyle();
      });
    } else {
      console.error('Re-analyze button not found!');
    }

    if (generateNewImageButton) {
      generateNewImageButton.addEventListener('click', function() {
        console.log('Generate New Image button clicked');
        const userSignedIn = this.getAttribute('data-user-signed-in') === 'true';
        const userHasActiveSubscription = this.getAttribute('data-user-has-active-subscription') === 'true';
        
        if (userHasActiveSubscription) {
          generateImage(window.preferredStyles);
        } else if (userSignedIn) {
          // Redirect to account page for subscription
          window.location.href = '/account';
        } else {
          // Redirect to login page
          window.location.href = '/users/sign_in';
        }
      });
    } else {
      console.error('Generate New Image button not found!');
    }

    // Function to handle building selection
    function handleBuildingSelection(buildingId, stylesData) {
      console.log(`Raw styles data for building ${buildingId}:`, stylesData);
      
      let parsedStyles;
      try {
        parsedStyles = JSON.parse(stylesData || '[]');
        if (!Array.isArray(parsedStyles)) {
          console.warn(`Parsed styles for building ${buildingId} is not an array, converting to array.`);
          parsedStyles = [parsedStyles].filter(Boolean);
        }
      } catch (error) {
        console.error(`Error parsing styles for building ${buildingId}:`, error);
        parsedStyles = [];
      }
      
      console.log(`Parsed styles for building ${buildingId}:`, parsedStyles);
      
      // Find the heart button for this building
      const heartButton = document.querySelector(`[data-building-id="${buildingId}"].select-image`);
      
      if (selectedBuildings.has(buildingId)) {
        selectedBuildings.delete(buildingId);
        if (heartButton) {
          heartButton.classList.remove('btn-primary');
          heartButton.classList.add('btn-outline-primary');
          heartButton.innerHTML = '<i class="far fa-heart"></i>';
          heartButton.title = 'Like this architectural style';
        }
      } else {
        selectedBuildings.set(buildingId, parsedStyles);
        if (heartButton) {
          heartButton.classList.remove('btn-outline-primary');
          heartButton.classList.add('btn-primary');
          heartButton.innerHTML = '<i class="fas fa-heart"></i>';
          heartButton.title = 'Liked!';
        }
      }
      
      console.log('Updated selected buildings:', Array.from(selectedBuildings.entries()));
      updateSelectedCount();
    }

    // Add click handlers to heart buttons
    selectButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent event bubbling
        const buildingId = this.getAttribute('data-building-id');
        const stylesData = this.getAttribute('data-styles');
        handleBuildingSelection(buildingId, stylesData);
      });
    });

    // Add click handlers to images for selection
    const buildingImages = document.querySelectorAll('.square-image');
    buildingImages.forEach(image => {
      image.addEventListener('click', function(e) {
        e.preventDefault(); // Prevent any default behavior
        const buildingId = this.getAttribute('data-building-id');
        const stylesData = this.getAttribute('data-styles');
        handleBuildingSelection(buildingId, stylesData);
      });
    });
    
function analyzeMyStyle() {
  console.log('analyzeMyStyle function called');
  console.log('Selected buildings:', Array.from(selectedBuildings.entries()));

  if (selectedBuildings.size === 0) {
    alert('Please select at least one building before analyzing.');
    return;
  }

  const allStyles = {};
  let totalCount = 0;
  let hasPercentages = false;

  selectedBuildings.forEach((parsedStyles, buildingId) => {
    console.log(`Processing building ${buildingId}, styles:`, parsedStyles);

    if (!Array.isArray(parsedStyles)) {
      console.warn(`Styles for building ${buildingId} is not an array:`, parsedStyles);
      return;
    }

    parsedStyles.forEach((style) => {
      if (typeof style !== 'string') {
        console.warn(`Invalid style for building ${buildingId}:`, style);
        return;
      }

      // Check if the style is a JSON string and parse it
      if (style.startsWith('[') && style.endsWith(']')) {
        try {
          const jsonStyles = JSON.parse(style);
          jsonStyles.forEach(processStyle);
        } catch (error) {
          console.error(`Error parsing JSON style: ${style}`, error);
        }
      } else {
        processStyle(style);
      }
    });
  });

  function processStyle(style) {
    console.log(`Processing style: "${style}"`);
    const trimmedStyle = style.trim();
    const match = trimmedStyle.match(/(.+?)(?::\s*(\d+(?:\.\d+)?)%?)?$/);

    if (match) {
      const styleName = match[1].trim();
      const percentage = match[2] ? parseFloat(match[2]) : 100; // Default to 100 if no percentage

      if (!isNaN(percentage)) {
        if (match[2]) hasPercentages = true;
        allStyles[styleName] = (allStyles[styleName] || 0) + percentage;
        totalCount += percentage;
        console.log(`Added style: "${styleName}", Percentage: ${percentage}, Total count: ${totalCount}`);
      } else {
        console.warn(`Invalid percentage for style: "${trimmedStyle}"`);
      }
    } else {
      console.warn(`Style didn't match expected format: "${trimmedStyle}"`);
    }
  }

  console.log('Processed styles:', allStyles);
  console.log('Total count:', totalCount);
  console.log('Has percentages:', hasPercentages);

  if (totalCount === 0) {
    alert('No valid architectural styles found in the selected buildings.');
    return;
  }

  const preferredStyles = Object.entries(allStyles)
    .map(([name, count]) => ({
      name,
      percentage: Math.round((count / totalCount) * 100)
    }))
    .sort((a, b) => b.percentage - a.percentage);

  console.log('Preferred styles:', preferredStyles);
  window.preferredStyles = preferredStyles;
  displayPreferredStyles(preferredStyles);
  generateNewImageButton.style.display = 'block';
}

function displayPreferredStyles(styles) {
  console.log('displayPreferredStyles called with styles:', styles);
  
  // Show loading in modal
  const modalStyleSummary = document.getElementById('modal-style-summary');
  modalStyleSummary.innerHTML = `
    <div class="text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Creating your profile...</span>
      </div>
      <p class="text-muted mt-2">Creating your profile...</p>
    </div>
  `;
  
  // Show the modal
  $('#styleProfileModal').modal('show');
  
  // Display selected buildings in modal
  const selectedBuildingsGrid = document.getElementById('selected-buildings-grid');
  selectedBuildingsGrid.innerHTML = '';
  
  // Get the actual building elements and their images
  selectedBuildings.forEach((styles, buildingId) => {
    const buildingCard = document.querySelector(`[data-building-id="${buildingId}"]`).closest('.building-card');
    const imgSrc = buildingCard.querySelector('.square-image').src;
    
    const thumbnail = document.createElement('div');
    thumbnail.className = 'col-4 col-md-3 mb-3';
    thumbnail.innerHTML = `
      <img src="${imgSrc}" class="img-fluid rounded" alt="Selected building">
    `;
    selectedBuildingsGrid.appendChild(thumbnail);
  });
  
  if (selectedBuildings.size > 0) {
    document.getElementById('selected-buildings-preview').style.display = 'block';
    document.getElementById('view-tour-btn').style.display = 'inline-block';
  }
  
  // Fetch the plain-language summary
  fetch('/architecture_explorer/analyze_style_preferences', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({ styles: styles })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success && data.title && data.summary) {
      // Create learn more links
      let learnMoreLinks = '';
      if (data.top_styles && data.top_styles.length > 0) {
        learnMoreLinks = `
          <div class="mt-3 pt-3 border-top">
            <h6 class="text-muted mb-2">Learn more about your styles:</h6>
            <div class="d-flex flex-wrap">
              ${data.top_styles.map(style => `
                <a href="https://en.wikipedia.org/wiki/${encodeURIComponent(style.replace(/ /g, '_'))}_architecture" 
                   target="_blank" 
                   class="btn btn-outline-info btn-sm mr-2 mb-2">
                  <i class="fas fa-external-link-alt mr-1"></i>
                  ${style}
                </a>
              `).join('')}
            </div>
          </div>
        `;
      }
      
      modalStyleSummary.innerHTML = `
        <div id="style-summary" class="p-4 bg-light rounded mb-3">
          <h3 class="mb-3 text-primary" style="font-weight: 600;">${data.title}</h3>
          <p class="mb-0 text-secondary" style="font-size: 1.1rem; line-height: 1.6;">
            ${data.summary}
          </p>
          ${learnMoreLinks}
        </div>
      `;
      
      // Store for sharing
      window.currentStyleProfile = {
        title: data.title,
        summary: data.summary
      };
    } else {
      console.error('Failed to get style summary:', data.error);
      modalStyleSummary.innerHTML = '<p class="text-danger">Failed to generate your profile. Please try again.</p>';
    }
  })
  .catch(error => {
    console.error('Error fetching style summary:', error);
    modalStyleSummary.innerHTML = '<p class="text-danger">An error occurred. Please try again.</p>';
  });

  // Update the generate button in modal
  const generateModalBtn = document.getElementById('generate-image-modal-btn');
  if (generateModalBtn) {
    const userSignedIn = generateNewImageButton.getAttribute('data-user-signed-in') === 'true';
    const userHasActiveSubscription = generateNewImageButton.getAttribute('data-user-has-active-subscription') === 'true';
    
    generateModalBtn.style.display = 'inline-block';
    
    if (userHasActiveSubscription) {
      generateModalBtn.textContent = 'Generate Building';
      generateModalBtn.onclick = () => generateImage(styles);
    } else if (userSignedIn) {
      generateModalBtn.textContent = 'Subscribe to Generate';
      generateModalBtn.onclick = () => window.location.href = '/account';
    } else {
      generateModalBtn.textContent = 'Login to Generate';
      generateModalBtn.onclick = () => window.location.href = '/users/sign_in';
    }
  }
}

function generateImage(styles) {
  console.log('Generating image based on styles:', styles);
  
  document.getElementById('loading-spinner').style.display = 'block';
  
  const prompt = styles.slice(0, 3).map(style => style.name).join(', ');
  
  fetch('/designs/submit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({ 
      architecture_type: 'custom building',
      user_selections: styles.map(style => `${style.name}: ${style.percentage}%`),
      image_style: 'photo-realistic style'
    })
  })
  .then(response => response.text())
  .then(html => {
    document.getElementById('loading-spinner').style.display = 'none';
    
    // Parse the HTML response
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    
    // Try to find the image URL
    const imgElement = doc.querySelector('img');
    if (imgElement && imgElement.src) {
      displayGeneratedImage(imgElement.src);
    } else {
      console.error('Failed to find image URL in HTML response');
      alert('Failed to generate image. Unable to find image URL in response.');
    }
  })
  .catch(error => {
    console.error('Error generating image:', error);
    document.getElementById('loading-spinner').style.display = 'none';
    alert(`An error occurred while generating the image: ${error.message}`);
  });
}

function displayGeneratedImage(imageUrl) {
  const generatedImageDiv = document.getElementById('generated-image');
  if (!generatedImageDiv) {
    console.error('generated-image div not found');
    return;
  }
  
  generatedImageDiv.innerHTML = `
    <h6 class="mb-3">Generated Building Based on Your Style:</h6>
    <img src="${imageUrl}" class="img-fluid" alt="Generated Building">
  `;
  
  // Show the "Generate New Image" button
  const generateNewImageButton = document.getElementById('generate-new-image');
  if (generateNewImageButton) {
    generateNewImageButton.style.display = 'block';
  }
}

function updateSelectedCount() {
  const count = selectedBuildings.size;
  const countNumber = document.getElementById('count-number');
  if (countNumber) {
    countNumber.textContent = count;
  }
  
  // Update button state
  if (count >= 3) {
    analyzeButton.disabled = false;
    analyzeButton.classList.remove('btn-secondary');
    analyzeButton.classList.add('btn-primary');
  } else {
    analyzeButton.disabled = true;
  }
  
  console.log('Selected count updated:', count);
}

// Social sharing functionality
function setupSocialSharing() {
  if (!window.currentStyleProfile) {
    alert('Please wait for your profile to generate.');
    return;
  }
  
  const { title, summary } = window.currentStyleProfile;
  const shareText = `I'm a "${title}" according to Architecture Helper! ${summary}`;
  const shareUrl = `${window.location.href} - Find your own architectural style!`;
  
  return { shareText, shareUrl };
}

document.getElementById('share-twitter-btn').addEventListener('click', function() {
  const { shareText, shareUrl } = setupSocialSharing();
  if (!shareText) return;
  
  const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText + ' ' + shareUrl)}`;
  window.open(twitterUrl, '_blank');
});

document.getElementById('share-facebook-btn').addEventListener('click', function() {
  const { shareText, shareUrl } = setupSocialSharing();
  if (!shareText) return;
  
  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&quote=${encodeURIComponent(shareText + ' Find your own architectural style!')}`;
  window.open(facebookUrl, '_blank');
});

document.getElementById('share-linkedin-btn').addEventListener('click', function() {
  const { shareText, shareUrl } = setupSocialSharing();
  if (!shareText) return;
  
  const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(window.location.href)}&summary=${encodeURIComponent(shareText + ' Find your own architectural style!')}`;
  window.open(linkedinUrl, '_blank');
});

// View tour functionality - using the full virtual tour experience
document.getElementById('view-tour-btn').addEventListener('click', function() {
  // Show loading state
  this.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Loading Tour...';
  this.disabled = true;
  
  // Get building IDs from selected buildings
  const buildingIds = Array.from(selectedBuildings.keys());
  
  if (buildingIds.length === 0) {
    alert('No buildings selected for tour.');
    this.innerHTML = '<i class="fas fa-route mr-1"></i> View Style Tour';
    this.disabled = false;
    return;
  }
  
  // Fetch actual building data from the server using API endpoint
  Promise.all(buildingIds.map(buildingId => 
    fetch(`/architecture_explorer/${buildingId}/building_data`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          return {
            id: data.id,
            image_url: data.image_url,
            address: data.address,
            h3_contents: data.h3_contents,
            html_content: data.html_content
          };
        } else {
          throw new Error(data.error || 'Failed to fetch building data');
        }
      })
      .catch(error => {
        console.error(`Error fetching building ${buildingId}:`, error);
        // Fallback to basic data from the current page
        const buildingCard = document.querySelector(`[data-building-id="${buildingId}"]`).closest('.building-card');
        const imgSrc = buildingCard.querySelector('.square-image').src;
        
        return {
          id: parseInt(buildingId),
          image_url: imgSrc,
          address: `Building #${buildingId}`,
          h3_contents: JSON.stringify(selectedBuildings.get(buildingId)),
          html_content: `<h3>Architectural Analysis</h3><p>Unable to load detailed analysis for this building.</p>`
        };
      })
  ))
  .then(tourBuildings => {
    // Reset button state
    this.innerHTML = '<i class="fas fa-route mr-1"></i> View Style Tour';
    this.disabled = false;
    
    // Close the current modal
    $('#styleProfileModal').modal('hide');
    
    setTimeout(() => {
      startVirtualTour(tourBuildings);
    }, 300);
  })
  .catch(error => {
    console.error('Error loading tour buildings:', error);
    alert('Error loading building data for tour.');
    // Reset button state
    this.innerHTML = '<i class="fas fa-route mr-1"></i> View Style Tour';
    this.disabled = false;
  });
});

// Virtual Tour Functionality (from places pages)
let virtualTourBuildings = [];
let currentBuildingIndex = 0;
let isAutoAdvancing = false;

function startVirtualTour(buildings) {
  console.log('Starting virtual tour with buildings:', buildings);
  virtualTourBuildings = buildings;
  currentBuildingIndex = 0;
  
  // Show virtual tour modal
  const virtualTourModal = new bootstrap.Modal(document.getElementById('virtualTourModal'));
  virtualTourModal.show();
  
  // Setup event listeners after modal is shown
  setTimeout(() => {
    console.log('Setting up event listeners...');
    setupVirtualTourEventListeners();
  }, 200);
  
  // Initialize tour
  loadBuildingContent(currentBuildingIndex);
  updateTourCounter();
}

function loadBuildingContent(index) {
  const building = virtualTourBuildings[index];
  const container = document.getElementById('building-content-container');
  
  console.log('Loading building content for index:', index, 'Building:', building);
  
  if (!building) {
    console.error('No building found for index:', index);
    return;
  }
  
  if (!container) {
    console.error('Building content container not found');
    return;
  }
  
  // Add loading effect
  container.classList.add('loading');
  
  // Create building content HTML
  const contentHTML = createBuildingContentHTML(building);
  
  // Small delay to show loading effect
  setTimeout(() => {
    container.innerHTML = contentHTML;
    container.classList.remove('loading');
    
    // Update navigation buttons
    updateNavigationButtons();
    updateTourCounter();
    
    // Update building address
    const addressInlineElement = document.getElementById('current-building-address-inline');
    if (addressInlineElement) addressInlineElement.textContent = building.address || 'Building Analysis';
  }, 150);
}

function createBuildingContentHTML(building) {
  let styles = [];
  try {
    styles = JSON.parse(building.h3_contents || '[]').slice(0, 6);
  } catch (e) {
    styles = ['Style analysis available'];
  }

  // Get full HTML content
  let htmlContent = building.html_content || '';
  let displayContent = '';
  
  if (htmlContent) {
    displayContent = htmlContent;
  } else {
    displayContent = '<p>No analysis content available for this building.</p>';
  }

  return `
    <div class="building-analysis-section">
      <div class="building-analysis-content">
        ${displayContent}
      </div>
    </div>
    
    <div class="building-image-section">
      ${building.image_url ? `
        <div class="building-image-container" style="cursor: pointer;" onclick="openFullscreenImage('${building.image_url}')">
          <img src="${building.image_url}" alt="Building" />
          <div class="image-overlay">
            <i class="fas fa-expand-arrows-alt"></i>
          </div>
          <div class="building-styles-overlay">
            ${styles.slice(0, 6).map(style => 
              `<span class="style-badge-tour">${style}</span>`
            ).join('')}
            ${styles.length > 6 ? `<span class="style-badge-tour">+${styles.length - 6} more</span>` : ''}
          </div>
        </div>
      ` : '<div class="building-image-container bg-light d-flex align-items-center justify-content-center" style="height: 300px;"><i class="fas fa-image fa-3x text-muted"></i></div>'}
    </div>
  `;
}

function updateNavigationButtons() {
  const prevBtn = document.getElementById('prev-building-btn');
  const nextBtn = document.getElementById('next-building-btn');
  
  console.log('Updating navigation buttons - Current index:', currentBuildingIndex, 'Total:', virtualTourBuildings.length);
  
  prevBtn.disabled = currentBuildingIndex === 0;
  nextBtn.disabled = currentBuildingIndex === virtualTourBuildings.length - 1;
}

function updateTourCounter() {
  const counterSpan = document.getElementById('tour-counter');
  const newText = `${currentBuildingIndex + 1} / ${virtualTourBuildings.length}`;
  counterSpan.textContent = newText;
  console.log('Updated counter to:', newText);
}

// Virtual Tour Event Listeners
function setupVirtualTourEventListeners() {
  console.log('Setting up virtual tour event listeners');
  
  // Previous building button
  const prevBtn = document.getElementById('prev-building-btn');
  if (prevBtn) {
    prevBtn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Previous button clicked, current index:', currentBuildingIndex);
      if (currentBuildingIndex > 0) {
        currentBuildingIndex--;
        loadBuildingContent(currentBuildingIndex);
        // Add visual feedback
        this.style.transform = 'scale(0.95)';
        setTimeout(() => this.style.transform = '', 150);
      }
    });
  }

  // Next building button
  const nextBtn = document.getElementById('next-building-btn');
  if (nextBtn) {
    nextBtn.addEventListener('click', function(e) {
      e.preventDefault();
      console.log('Next button clicked, current index:', currentBuildingIndex);
      if (currentBuildingIndex < virtualTourBuildings.length - 1) {
        currentBuildingIndex++;
        loadBuildingContent(currentBuildingIndex);
        // Add visual feedback
        this.style.transform = 'scale(0.95)';
        setTimeout(() => this.style.transform = '', 150);
      }
    });
  }

  // End Tour button (header)
  const endTourBtn = document.getElementById('end-tour-btn');
  if (endTourBtn) {
    endTourBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const virtualTourModal = document.getElementById('virtualTourModal');
      
      // Try multiple methods to close the modal
      try {
        // Method 1: Try Bootstrap modal instance
        const modal = bootstrap.Modal.getInstance(virtualTourModal);
        if (modal) {
          modal.hide();
          return;
        }
      } catch (error) {
        console.log('Bootstrap modal instance method failed, trying alternative');
      }
      
      // Method 2: Manual modal closing
      virtualTourModal.classList.remove('show');
      virtualTourModal.style.display = 'none';
      document.body.classList.remove('modal-open');
      
      // Remove backdrop
      const backdrop = document.querySelector('.modal-backdrop');
      if (backdrop) {
        backdrop.remove();
      }
      
      // Remove any remaining modal-related classes
      document.body.classList.remove('modal-open');
      document.body.style.paddingRight = '';
      
      console.log('Modal closed successfully');
    });
  }
}

// Keyboard navigation
document.addEventListener('keydown', function(e) {
  // Only handle keyboard events when virtual tour modal is open
  const virtualTourModal = document.getElementById('virtualTourModal');
  if (!virtualTourModal || !virtualTourModal.classList.contains('show')) return;
  
  switch(e.key) {
    case 'ArrowLeft':
      e.preventDefault();
      if (currentBuildingIndex > 0) {
        currentBuildingIndex--;
        loadBuildingContent(currentBuildingIndex);
      }
      break;
    case 'ArrowRight':
      e.preventDefault();
      if (currentBuildingIndex < virtualTourBuildings.length - 1) {
        currentBuildingIndex++;
        loadBuildingContent(currentBuildingIndex);
      }
      break;
    case 'Escape':
      e.preventDefault();
      const modal = bootstrap.Modal.getInstance(virtualTourModal);
      if (modal) modal.hide();
      break;
  }
});

// Global function for opening fullscreen image
window.openFullscreenImage = function(imageUrl) {
  console.log('Opening fullscreen image:', imageUrl);
  
  // Set the image source
  const fullscreenImage = document.getElementById('fullscreen-image');
  if (fullscreenImage) {
    fullscreenImage.src = imageUrl;
    fullscreenImage.onload = function() {
      console.log('Image loaded successfully');
    };
    fullscreenImage.onerror = function() {
      console.error('Failed to load image:', imageUrl);
    };
  }
  
  // Show the fullscreen modal
  const fullscreenModalElement = document.getElementById('fullscreenImageModal');
  if (fullscreenModalElement) {
    const fullscreenModal = new bootstrap.Modal(fullscreenModalElement, {
      backdrop: 'static',
      keyboard: true
    });
    fullscreenModal.show();
    
    // Add event listener for close button
    const closeBtn = document.getElementById('close-fullscreen-btn');
    if (closeBtn) {
      closeBtn.addEventListener('click', function(e) {
        e.preventDefault();
        closeFullscreenModal();
      });
    }
  } else {
    console.error('Fullscreen modal element not found');
  }
};

// Function to close fullscreen modal
function closeFullscreenModal() {
  const fullscreenModalElement = document.getElementById('fullscreenImageModal');
  if (fullscreenModalElement) {
    try {
      // Method 1: Try Bootstrap modal instance
      const modal = bootstrap.Modal.getInstance(fullscreenModalElement);
      if (modal) {
        modal.hide();
        return;
      }
    } catch (error) {
      console.log('Bootstrap modal instance method failed, trying alternative');
    }
    
    // Method 2: Manual modal closing
    fullscreenModalElement.classList.remove('show');
    fullscreenModalElement.style.display = 'none';
    document.body.classList.remove('modal-open');
    
    // Remove backdrop
    const backdrop = document.querySelector('.modal-backdrop');
    if (backdrop) {
      backdrop.remove();
    }
    
    // Remove any remaining modal-related classes
    document.body.classList.remove('modal-open');
    document.body.style.paddingRight = '';
    
    console.log('Fullscreen modal closed successfully');
  }
}

// Clean up when modal is closed
const virtualTourModal = document.getElementById('virtualTourModal');
if (virtualTourModal) {
  virtualTourModal.addEventListener('hidden.bs.modal', function() {
    // Reset tour state
    virtualTourBuildings = [];
    currentBuildingIndex = 0;
    isAutoAdvancing = false;
  });
}

console.log('Event listeners set up');
  });
</script>
</body>
</html>