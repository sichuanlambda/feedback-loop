<div class="container">
  <h1 class="text-center mb-4">Architecture Style Finder</h1>
  
  <% user_signed_in = user_signed_in? %>
  <% user_has_active_subscription = user_signed_in && current_user.subscription_status == 'active' %>
  
  <div class="row">
    <div class="col-md-8">
      <div id="image-gallery" class="row">
        <% BuildingAnalysis.where(visible_in_library: true).order("RANDOM()").limit(20).each do |building| %>
          <div class="col-md-4 mb-3">
            <div class="card h-100 building-card">
              <div class="square-image-container">
                <img src="<%= building.image_url %>" class="card-img-top square-image" alt="Building Image" data-toggle="modal" data-target="#imageModal<%= building.id %>">
              </div>
              <div class="card-body d-flex flex-column justify-content-end">
                <button class="btn btn-outline-primary btn-sm select-image w-100" 
                        data-building-id="<%= building.id %>" 
                        data-styles="<%= building.h3_contents.to_json %>"
                        onclick="console.log('Raw h3_contents for building <%= building.id %>:', <%= raw building.h3_contents.to_json %>)">
                  Select
                </button>
              </div>
            </div>
          </div>

          <!-- Modal for each image -->
          <div class="modal fade" id="imageModal<%= building.id %>" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel<%= building.id %>" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="imageModalLabel<%= building.id %>">Building Details</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <img src="<%= building.image_url %>" class="img-fluid mb-3" alt="Building Image">
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card sticky-top" style="top: 20px;">
        <div class="card-body">
          <h5 class="card-title">Your Style Preferences</h5>
          <div id="selected-styles"></div>
          <button id="analyze-button" class="btn btn-primary btn-block mt-3">Analyze My Style</button>
          <div id="generated-image" class="mt-3"></div>
          <button id="generate-new-image" class="btn btn-secondary btn-block mt-3" style="display: none;" 
                  data-user-signed-in="<%= user_signed_in %>"
                  data-user-has-active-subscription="<%= user_has_active_subscription %>">
            Generate New Image
          </button>
          <button id="re-analyze-button" class="btn btn-outline-primary btn-block mt-3" style="display: none;">Re-analyze</button>
          <div id="loading-spinner" class="text-center mt-3" style="display: none;">
            <div class="spinner-border text-primary" role="status">
              <span class="sr-only">Loading...</span>
            </div>
            <p class="mt-2">Generating your custom building...</p>
          </div>
          <a href="/architecture_explorer/address_search" class="btn btn-outline-primary btn-block mt-3">New Design Analysis</a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .square-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%; /* 1:1 Aspect Ratio */
    overflow: hidden;
  }
  .square-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    cursor: pointer;
    transition: transform 0.3s ease;
  }
  .square-image:hover {
    transform: scale(1.05);
  }
  .building-card {
    transition: box-shadow 0.3s ease;
  }
  .building-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  #selected-styles {
    background-color: #f0f0f0;
    padding: 10px;
    margin-top: 10px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded');
    const selectedBuildings = new Map();
    const selectButtons = document.querySelectorAll('.select-image');
    const analyzeButton = document.getElementById('analyze-button');
    const reAnalyzeButton = document.getElementById('re-analyze-button');
    const selectedStylesDiv = document.getElementById('selected-styles');
    const generatedImageDiv = document.getElementById('generated-image');
    const generateNewImageButton = document.getElementById('generate-new-image');
    
    console.log('Analyze button found:', analyzeButton);
    console.log('Selected styles div found:', selectedStylesDiv);

    if (analyzeButton) {
      analyzeButton.addEventListener('click', function() {
        console.log('Analyze button clicked');
        if (!selectedBuildings || selectedBuildings.size === 0) {
          console.error('No buildings selected');
          alert('Please select at least one building before analyzing.');
          return;
        }
        analyzeMyStyle();
        // Hide the analyze button and show the re-analyze button
        analyzeButton.style.display = 'none';
        reAnalyzeButton.style.display = 'block';
      });
    } else {
      console.error('Analyze button not found!');
    }

    if (reAnalyzeButton) {
      reAnalyzeButton.addEventListener('click', function() {
        console.log('Re-analyze button clicked');
        analyzeMyStyle();
      });
    } else {
      console.error('Re-analyze button not found!');
    }

    if (generateNewImageButton) {
      generateNewImageButton.addEventListener('click', function() {
        console.log('Generate New Image button clicked');
        const userSignedIn = this.getAttribute('data-user-signed-in') === 'true';
        const userHasActiveSubscription = this.getAttribute('data-user-has-active-subscription') === 'true';
        
        if (userHasActiveSubscription) {
          generateImage(window.preferredStyles);
        } else if (userSignedIn) {
          // Redirect to account page for subscription
          window.location.href = '/account';
        } else {
          // Redirect to login page
          window.location.href = '/users/sign_in';
        }
      });
    } else {
      console.error('Generate New Image button not found!');
    }

    selectButtons.forEach(button => {
      button.addEventListener('click', function() {
        const buildingId = this.getAttribute('data-building-id');
        const stylesData = this.getAttribute('data-styles');
        console.log(`Raw styles data for building ${buildingId}:`, stylesData);
        
        let parsedStyles;
        try {
          parsedStyles = JSON.parse(stylesData || '[]');
          if (!Array.isArray(parsedStyles)) {
            console.warn(`Parsed styles for building ${buildingId} is not an array, converting to array.`);
            parsedStyles = [parsedStyles].filter(Boolean);
          }
        } catch (error) {
          console.error(`Error parsing styles for building ${buildingId}:`, error);
          parsedStyles = [];
        }
        
        console.log(`Parsed styles for building ${buildingId}:`, parsedStyles);
        
        if (selectedBuildings.has(buildingId)) {
          selectedBuildings.delete(buildingId);
          this.classList.remove('btn-primary');
          this.classList.add('btn-outline-primary');
          this.textContent = 'Select';
        } else {
          selectedBuildings.set(buildingId, parsedStyles);
          this.classList.remove('btn-outline-primary');
          this.classList.add('btn-primary');
          this.textContent = 'Selected';
        }
        
        console.log('Updated selected buildings:', Array.from(selectedBuildings.entries()));
        
        analyzeButton.disabled = selectedBuildings.size === 0;
        updateSelectedCount();
      });
    });
    
function analyzeMyStyle() {
  console.log('analyzeMyStyle function called');
  console.log('Selected buildings:', Array.from(selectedBuildings.entries()));

  if (selectedBuildings.size === 0) {
    alert('Please select at least one building before analyzing.');
    return;
  }

  const allStyles = {};
  let totalCount = 0;
  let hasPercentages = false;

  selectedBuildings.forEach((parsedStyles, buildingId) => {
    console.log(`Processing building ${buildingId}, styles:`, parsedStyles);

    if (!Array.isArray(parsedStyles)) {
      console.warn(`Styles for building ${buildingId} is not an array:`, parsedStyles);
      return;
    }

    parsedStyles.forEach((style) => {
      if (typeof style !== 'string') {
        console.warn(`Invalid style for building ${buildingId}:`, style);
        return;
      }

      // Check if the style is a JSON string and parse it
      if (style.startsWith('[') && style.endsWith(']')) {
        try {
          const jsonStyles = JSON.parse(style);
          jsonStyles.forEach(processStyle);
        } catch (error) {
          console.error(`Error parsing JSON style: ${style}`, error);
        }
      } else {
        processStyle(style);
      }
    });
  });

  function processStyle(style) {
    console.log(`Processing style: "${style}"`);
    const trimmedStyle = style.trim();
    const match = trimmedStyle.match(/(.+?)(?::\s*(\d+(?:\.\d+)?)%?)?$/);

    if (match) {
      const styleName = match[1].trim();
      const percentage = match[2] ? parseFloat(match[2]) : 100; // Default to 100 if no percentage

      if (!isNaN(percentage)) {
        if (match[2]) hasPercentages = true;
        allStyles[styleName] = (allStyles[styleName] || 0) + percentage;
        totalCount += percentage;
        console.log(`Added style: "${styleName}", Percentage: ${percentage}, Total count: ${totalCount}`);
      } else {
        console.warn(`Invalid percentage for style: "${trimmedStyle}"`);
      }
    } else {
      console.warn(`Style didn't match expected format: "${trimmedStyle}"`);
    }
  }

  console.log('Processed styles:', allStyles);
  console.log('Total count:', totalCount);
  console.log('Has percentages:', hasPercentages);

  if (totalCount === 0) {
    alert('No valid architectural styles found in the selected buildings.');
    return;
  }

  const preferredStyles = Object.entries(allStyles)
    .map(([name, count]) => ({
      name,
      percentage: Math.round((count / totalCount) * 100)
    }))
    .sort((a, b) => b.percentage - a.percentage);

  console.log('Preferred styles:', preferredStyles);
  window.preferredStyles = preferredStyles;
  displayPreferredStyles(preferredStyles);
  generateNewImageButton.style.display = 'block';
}

function displayPreferredStyles(styles) {
  console.log('displayPreferredStyles called with styles:', styles);
  
  if (!selectedStylesDiv) {
    console.error('selected-styles div not found');
    return;
  }
  
  selectedStylesDiv.innerHTML = '<h6 class="mb-3">Your Top Styles:</h6>';
  styles.slice(0, 5).forEach(style => {
    const styleElement = document.createElement('div');
    styleElement.className = 'mb-2';
    styleElement.innerHTML = `
      <span>${style.name}</span>
      <div class="progress">
        <div class="progress-bar" role="progressbar" style="width: ${style.percentage}%;" 
             aria-valuenow="${style.percentage}" aria-valuemin="0" aria-valuemax="100">${style.percentage}%</div>
      </div>
    `;
    selectedStylesDiv.appendChild(styleElement);
  });

  console.log('UI updated with preferred styles');

  // Show the "Generate New Image" button
  if (generateNewImageButton) {
    generateNewImageButton.style.display = 'block';
    const userSignedIn = generateNewImageButton.getAttribute('data-user-signed-in') === 'true';
    const userHasActiveSubscription = generateNewImageButton.getAttribute('data-user-has-active-subscription') === 'true';
    
    if (userHasActiveSubscription) {
      generateNewImageButton.textContent = 'Generate New Image';
      generateNewImageButton.classList.add('btn-secondary');
      generateNewImageButton.classList.remove('btn-primary');
    } else if (userSignedIn) {
      generateNewImageButton.textContent = 'Generate Image with Style';
      generateNewImageButton.classList.add('btn-primary');
      generateNewImageButton.classList.remove('btn-secondary');
    } else {
      generateNewImageButton.textContent = 'Login to Generate Image with Your Styles';
      generateNewImageButton.classList.add('btn-primary');
      generateNewImageButton.classList.remove('btn-secondary');
    }
  }
}

function generateImage(styles) {
  console.log('Generating image based on styles:', styles);
  
  document.getElementById('loading-spinner').style.display = 'block';
  
  const prompt = styles.slice(0, 3).map(style => style.name).join(', ');
  
  fetch('/designs/submit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({ 
      architecture_type: 'custom building',
      user_selections: styles.map(style => `${style.name}: ${style.percentage}%`),
      image_style: 'photo-realistic style'
    })
  })
  .then(response => response.text())
  .then(html => {
    document.getElementById('loading-spinner').style.display = 'none';
    
    // Parse the HTML response
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    
    // Try to find the image URL
    const imgElement = doc.querySelector('img');
    if (imgElement && imgElement.src) {
      displayGeneratedImage(imgElement.src);
    } else {
      console.error('Failed to find image URL in HTML response');
      alert('Failed to generate image. Unable to find image URL in response.');
    }
  })
  .catch(error => {
    console.error('Error generating image:', error);
    document.getElementById('loading-spinner').style.display = 'none';
    alert(`An error occurred while generating the image: ${error.message}`);
  });
}

function displayGeneratedImage(imageUrl) {
  const generatedImageDiv = document.getElementById('generated-image');
  if (!generatedImageDiv) {
    console.error('generated-image div not found');
    return;
  }
  
  generatedImageDiv.innerHTML = `
    <h6 class="mb-3">Generated Building Based on Your Style:</h6>
    <img src="${imageUrl}" class="img-fluid" alt="Generated Building">
  `;
  
  // Show the "Generate New Image" button
  const generateNewImageButton = document.getElementById('generate-new-image');
  if (generateNewImageButton) {
    generateNewImageButton.style.display = 'block';
  }
}

function updateSelectedCount() {
  const count = selectedBuildings.size;
  analyzeButton.textContent = `Analyze My Style (${count} selected)`;
  console.log('Selected count updated:', count);
}

console.log('Event listeners set up');
  });
</script>
