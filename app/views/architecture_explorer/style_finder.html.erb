<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Architecture Style Finder</title>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-M4TLZ8N6CC"></script>
    <script defer data-domain="app.architecturehelper.com" src="https://plausible.io/js/script.js"></script>
    <script>
        !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
        posthog.init('phc_MltKSavY2s3FENOZhvocfU5qHx4f8xsJTAku0H0jVLH',{api_host:'https://app.posthog.com'})
    </script>
</head>
<body>


<div class="container">
  <h1 class="text-center mb-2">Architecture Style Finder</h1>
  <p class="text-center text-muted mb-4">Like the buildings that resonate with you to discover your architectural style profile</p>
  
  <% user_signed_in = user_signed_in? %>
  <% user_has_active_subscription = user_signed_in && current_user.subscription_status == 'active' %>
  
  <div class="row">
    <div class="col-md-8">
      <div id="image-gallery" class="row">
        <% BuildingAnalysis.where(visible_in_library: true).order("RANDOM()").limit(20).each do |building| %>
          <div class="col-md-4 mb-3">
            <div class="card h-100 building-card">
              <div class="square-image-container">
                <img src="<%= building.image_url %>" class="card-img-top square-image" alt="Building Image" data-toggle="modal" data-target="#imageModal<%= building.id %>">
              </div>
              <div class="card-body d-flex flex-column justify-content-end">
                <button class="btn btn-outline-primary select-image w-100" 
                        data-building-id="<%= building.id %>" 
                        data-styles="<%= building.h3_contents.to_json %>"
                        title="Like this architectural style"
                        onclick="console.log('Raw h3_contents for building <%= building.id %>:', <%= raw building.h3_contents.to_json %>)">
                  <i class="far fa-heart"></i>
                </button>
              </div>
            </div>
          </div>

          <!-- Modal for each image -->
          <div class="modal fade" id="imageModal<%= building.id %>" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel<%= building.id %>" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="imageModalLabel<%= building.id %>">Building Details</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <img src="<%= building.image_url %>" class="img-fluid mb-3" alt="Building Image">
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card sticky-top" style="top: 80px; z-index: 10;">
        <div class="card-body">
          <h5 class="card-title">Build Your Style Profile</h5>
          <p class="text-muted small mb-3">Like at least 3 buildings to discover your architectural style</p>
          <div id="selection-counter" class="mb-3 p-3 bg-light rounded text-center">
            <h3 class="mb-1"><span id="count-number">0</span></h3>
            <small class="text-muted">buildings selected</small>
          </div>
          <button id="analyze-button" class="btn btn-primary btn-block mt-3" disabled>
            <i class="fas fa-magic mr-1"></i> Analyze My Style
          </button>
          <button id="re-analyze-button" class="btn btn-outline-primary btn-block mt-3" style="display: none;">
            <i class="fas fa-redo mr-1"></i> Re-analyze
          </button>
          
          <hr class="my-4">
          
          <div class="text-center">
            <small class="text-muted">Want to analyze a specific building?</small>
            <a href="/architecture_explorer/address_search" class="btn btn-outline-secondary btn-sm btn-block mt-2">
              <i class="fas fa-camera mr-1"></i> Upload Building Photo
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Style Profile Modal -->
<div class="modal fade" id="styleProfileModal" tabindex="-1" role="dialog" aria-labelledby="styleProfileModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="styleProfileModalLabel">Your Architectural Style Profile</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div id="modal-style-summary" class="text-center mb-4">
          <!-- Profile content will be inserted here -->
        </div>
        <div id="selected-buildings-preview" class="mb-4" style="display: none;">
          <h6 class="mb-3">Your Selected Buildings:</h6>
          <div class="row" id="selected-buildings-grid">
            <!-- Selected building thumbnails will be inserted here -->
          </div>
        </div>
        <div class="text-center mt-4">
          <button id="view-tour-btn" class="btn btn-outline-primary mr-2" style="display: none;">
            <i class="fas fa-route mr-1"></i> View Style Tour
          </button>
          <div class="btn-group" role="group">
            <button id="share-twitter-btn" class="btn btn-primary">
              <i class="fab fa-twitter mr-1"></i> Twitter
            </button>
            <button id="share-facebook-btn" class="btn btn-primary">
              <i class="fab fa-facebook-f mr-1"></i> Facebook
            </button>
            <button id="share-linkedin-btn" class="btn btn-primary">
              <i class="fab fa-linkedin-in mr-1"></i> LinkedIn
            </button>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button id="generate-image-modal-btn" class="btn btn-primary" style="display: none;">Generate Building</button>
      </div>
    </div>
  </div>
</div>

<style>
  .square-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%; /* 1:1 Aspect Ratio */
    overflow: hidden;
  }
  .square-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    cursor: pointer;
    transition: transform 0.3s ease;
  }
  .square-image:hover {
    transform: scale(1.05);
  }
  .building-card {
    transition: box-shadow 0.3s ease;
  }
  .building-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  #selected-styles {
    background-color: #f0f0f0;
    padding: 10px;
    margin-top: 10px;
  }
  #style-summary {
    background: linear-gradient(135deg, #f5f7fa 0%, #e9ecef 100%);
    border-left: 4px solid #0056b3;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
    padding: 1rem !important;
  }
  #style-summary:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  #style-summary h5 {
    margin-bottom: 0.5rem !important;
  }
  #style-summary p {
    color: #495057;
  }
  .progress {
    height: 22px;
    background-color: #e9ecef;
  }
  .progress-bar {
    background-color: #0056b3;
    font-size: 0.875rem;
  }
  .select-image {
    font-size: 1.2rem;
    padding: 10px;
    border-radius: 50px;
    transition: all 0.3s ease;
    border-width: 2px;
  }
  .select-image:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }
  .select-image.btn-primary {
    background-color: #dc3545;
    border-color: #dc3545;
    color: white;
  }
  .select-image.btn-outline-primary {
    color: #6c757d;
    border-color: #dee2e6;
  }
  .select-image.btn-outline-primary:hover {
    color: #dc3545;
    border-color: #dc3545;
    background-color: transparent;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded');
    const selectedBuildings = new Map();
    const selectButtons = document.querySelectorAll('.select-image');
    const analyzeButton = document.getElementById('analyze-button');
    const reAnalyzeButton = document.getElementById('re-analyze-button');
    const selectedStylesDiv = document.getElementById('selected-styles');
    const generatedImageDiv = document.getElementById('generated-image');
    const generateNewImageButton = document.getElementById('generate-new-image');
    
    console.log('Analyze button found:', analyzeButton);
    console.log('Selected styles div found:', selectedStylesDiv);

    if (analyzeButton) {
      analyzeButton.addEventListener('click', function() {
        console.log('Analyze button clicked');
        if (!selectedBuildings || selectedBuildings.size === 0) {
          console.error('No buildings selected');
          alert('Please select at least one building before analyzing.');
          return;
        }
        analyzeMyStyle();
        // Hide the analyze button and show the re-analyze button
        analyzeButton.style.display = 'none';
        reAnalyzeButton.style.display = 'block';
      });
    } else {
      console.error('Analyze button not found!');
    }

    if (reAnalyzeButton) {
      reAnalyzeButton.addEventListener('click', function() {
        console.log('Re-analyze button clicked');
        analyzeMyStyle();
      });
    } else {
      console.error('Re-analyze button not found!');
    }

    if (generateNewImageButton) {
      generateNewImageButton.addEventListener('click', function() {
        console.log('Generate New Image button clicked');
        const userSignedIn = this.getAttribute('data-user-signed-in') === 'true';
        const userHasActiveSubscription = this.getAttribute('data-user-has-active-subscription') === 'true';
        
        if (userHasActiveSubscription) {
          generateImage(window.preferredStyles);
        } else if (userSignedIn) {
          // Redirect to account page for subscription
          window.location.href = '/account';
        } else {
          // Redirect to login page
          window.location.href = '/users/sign_in';
        }
      });
    } else {
      console.error('Generate New Image button not found!');
    }

    selectButtons.forEach(button => {
      button.addEventListener('click', function() {
        const buildingId = this.getAttribute('data-building-id');
        const stylesData = this.getAttribute('data-styles');
        console.log(`Raw styles data for building ${buildingId}:`, stylesData);
        
        let parsedStyles;
        try {
          parsedStyles = JSON.parse(stylesData || '[]');
          if (!Array.isArray(parsedStyles)) {
            console.warn(`Parsed styles for building ${buildingId} is not an array, converting to array.`);
            parsedStyles = [parsedStyles].filter(Boolean);
          }
        } catch (error) {
          console.error(`Error parsing styles for building ${buildingId}:`, error);
          parsedStyles = [];
        }
        
        console.log(`Parsed styles for building ${buildingId}:`, parsedStyles);
        
        if (selectedBuildings.has(buildingId)) {
          selectedBuildings.delete(buildingId);
          this.classList.remove('btn-primary');
          this.classList.add('btn-outline-primary');
          this.innerHTML = '<i class="far fa-heart"></i>';
          this.title = 'Like this architectural style';
        } else {
          selectedBuildings.set(buildingId, parsedStyles);
          this.classList.remove('btn-outline-primary');
          this.classList.add('btn-primary');
          this.innerHTML = '<i class="fas fa-heart"></i>';
          this.title = 'Liked!';
        }
        
        console.log('Updated selected buildings:', Array.from(selectedBuildings.entries()));
        
        updateSelectedCount();
      });
    });
    
function analyzeMyStyle() {
  console.log('analyzeMyStyle function called');
  console.log('Selected buildings:', Array.from(selectedBuildings.entries()));

  if (selectedBuildings.size === 0) {
    alert('Please select at least one building before analyzing.');
    return;
  }

  const allStyles = {};
  let totalCount = 0;
  let hasPercentages = false;

  selectedBuildings.forEach((parsedStyles, buildingId) => {
    console.log(`Processing building ${buildingId}, styles:`, parsedStyles);

    if (!Array.isArray(parsedStyles)) {
      console.warn(`Styles for building ${buildingId} is not an array:`, parsedStyles);
      return;
    }

    parsedStyles.forEach((style) => {
      if (typeof style !== 'string') {
        console.warn(`Invalid style for building ${buildingId}:`, style);
        return;
      }

      // Check if the style is a JSON string and parse it
      if (style.startsWith('[') && style.endsWith(']')) {
        try {
          const jsonStyles = JSON.parse(style);
          jsonStyles.forEach(processStyle);
        } catch (error) {
          console.error(`Error parsing JSON style: ${style}`, error);
        }
      } else {
        processStyle(style);
      }
    });
  });

  function processStyle(style) {
    console.log(`Processing style: "${style}"`);
    const trimmedStyle = style.trim();
    const match = trimmedStyle.match(/(.+?)(?::\s*(\d+(?:\.\d+)?)%?)?$/);

    if (match) {
      const styleName = match[1].trim();
      const percentage = match[2] ? parseFloat(match[2]) : 100; // Default to 100 if no percentage

      if (!isNaN(percentage)) {
        if (match[2]) hasPercentages = true;
        allStyles[styleName] = (allStyles[styleName] || 0) + percentage;
        totalCount += percentage;
        console.log(`Added style: "${styleName}", Percentage: ${percentage}, Total count: ${totalCount}`);
      } else {
        console.warn(`Invalid percentage for style: "${trimmedStyle}"`);
      }
    } else {
      console.warn(`Style didn't match expected format: "${trimmedStyle}"`);
    }
  }

  console.log('Processed styles:', allStyles);
  console.log('Total count:', totalCount);
  console.log('Has percentages:', hasPercentages);

  if (totalCount === 0) {
    alert('No valid architectural styles found in the selected buildings.');
    return;
  }

  const preferredStyles = Object.entries(allStyles)
    .map(([name, count]) => ({
      name,
      percentage: Math.round((count / totalCount) * 100)
    }))
    .sort((a, b) => b.percentage - a.percentage);

  console.log('Preferred styles:', preferredStyles);
  window.preferredStyles = preferredStyles;
  displayPreferredStyles(preferredStyles);
  generateNewImageButton.style.display = 'block';
}

function displayPreferredStyles(styles) {
  console.log('displayPreferredStyles called with styles:', styles);
  
  // Show loading in modal
  const modalStyleSummary = document.getElementById('modal-style-summary');
  modalStyleSummary.innerHTML = `
    <div class="text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Creating your profile...</span>
      </div>
      <p class="text-muted mt-2">Creating your profile...</p>
    </div>
  `;
  
  // Show the modal
  $('#styleProfileModal').modal('show');
  
  // Display selected buildings in modal
  const selectedBuildingsGrid = document.getElementById('selected-buildings-grid');
  selectedBuildingsGrid.innerHTML = '';
  
  // Get the actual building elements and their images
  selectedBuildings.forEach((styles, buildingId) => {
    const buildingCard = document.querySelector(`[data-building-id="${buildingId}"]`).closest('.building-card');
    const imgSrc = buildingCard.querySelector('.square-image').src;
    
    const thumbnail = document.createElement('div');
    thumbnail.className = 'col-4 col-md-3 mb-3';
    thumbnail.innerHTML = `
      <img src="${imgSrc}" class="img-fluid rounded" alt="Selected building">
    `;
    selectedBuildingsGrid.appendChild(thumbnail);
  });
  
  if (selectedBuildings.size > 0) {
    document.getElementById('selected-buildings-preview').style.display = 'block';
    document.getElementById('view-tour-btn').style.display = 'inline-block';
  }
  
  // Fetch the plain-language summary
  fetch('/architecture_explorer/analyze_style_preferences', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({ styles: styles })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success && data.title && data.summary) {
      // Create learn more links
      let learnMoreLinks = '';
      if (data.top_styles && data.top_styles.length > 0) {
        learnMoreLinks = `
          <div class="mt-3 pt-3 border-top">
            <h6 class="text-muted mb-2">Learn more about your styles:</h6>
            <div class="d-flex flex-wrap">
              ${data.top_styles.map(style => `
                <a href="https://en.wikipedia.org/wiki/${encodeURIComponent(style.replace(/ /g, '_'))}_architecture" 
                   target="_blank" 
                   class="btn btn-outline-info btn-sm mr-2 mb-2">
                  <i class="fas fa-external-link-alt mr-1"></i>
                  ${style}
                </a>
              `).join('')}
            </div>
          </div>
        `;
      }
      
      modalStyleSummary.innerHTML = `
        <div id="style-summary" class="p-4 bg-light rounded mb-3">
          <h3 class="mb-3 text-primary" style="font-weight: 600;">${data.title}</h3>
          <p class="mb-0 text-secondary" style="font-size: 1.1rem; line-height: 1.6;">
            ${data.summary}
          </p>
          ${learnMoreLinks}
        </div>
      `;
      
      // Store for sharing
      window.currentStyleProfile = {
        title: data.title,
        summary: data.summary
      };
    } else {
      console.error('Failed to get style summary:', data.error);
      modalStyleSummary.innerHTML = '<p class="text-danger">Failed to generate your profile. Please try again.</p>';
    }
  })
  .catch(error => {
    console.error('Error fetching style summary:', error);
    modalStyleSummary.innerHTML = '<p class="text-danger">An error occurred. Please try again.</p>';
  });

  // Update the generate button in modal
  const generateModalBtn = document.getElementById('generate-image-modal-btn');
  if (generateModalBtn) {
    const userSignedIn = generateNewImageButton.getAttribute('data-user-signed-in') === 'true';
    const userHasActiveSubscription = generateNewImageButton.getAttribute('data-user-has-active-subscription') === 'true';
    
    generateModalBtn.style.display = 'inline-block';
    
    if (userHasActiveSubscription) {
      generateModalBtn.textContent = 'Generate Building';
      generateModalBtn.onclick = () => generateImage(styles);
    } else if (userSignedIn) {
      generateModalBtn.textContent = 'Subscribe to Generate';
      generateModalBtn.onclick = () => window.location.href = '/account';
    } else {
      generateModalBtn.textContent = 'Login to Generate';
      generateModalBtn.onclick = () => window.location.href = '/users/sign_in';
    }
  }
}

function generateImage(styles) {
  console.log('Generating image based on styles:', styles);
  
  document.getElementById('loading-spinner').style.display = 'block';
  
  const prompt = styles.slice(0, 3).map(style => style.name).join(', ');
  
  fetch('/designs/submit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    },
    body: JSON.stringify({ 
      architecture_type: 'custom building',
      user_selections: styles.map(style => `${style.name}: ${style.percentage}%`),
      image_style: 'photo-realistic style'
    })
  })
  .then(response => response.text())
  .then(html => {
    document.getElementById('loading-spinner').style.display = 'none';
    
    // Parse the HTML response
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    
    // Try to find the image URL
    const imgElement = doc.querySelector('img');
    if (imgElement && imgElement.src) {
      displayGeneratedImage(imgElement.src);
    } else {
      console.error('Failed to find image URL in HTML response');
      alert('Failed to generate image. Unable to find image URL in response.');
    }
  })
  .catch(error => {
    console.error('Error generating image:', error);
    document.getElementById('loading-spinner').style.display = 'none';
    alert(`An error occurred while generating the image: ${error.message}`);
  });
}

function displayGeneratedImage(imageUrl) {
  const generatedImageDiv = document.getElementById('generated-image');
  if (!generatedImageDiv) {
    console.error('generated-image div not found');
    return;
  }
  
  generatedImageDiv.innerHTML = `
    <h6 class="mb-3">Generated Building Based on Your Style:</h6>
    <img src="${imageUrl}" class="img-fluid" alt="Generated Building">
  `;
  
  // Show the "Generate New Image" button
  const generateNewImageButton = document.getElementById('generate-new-image');
  if (generateNewImageButton) {
    generateNewImageButton.style.display = 'block';
  }
}

function updateSelectedCount() {
  const count = selectedBuildings.size;
  const countNumber = document.getElementById('count-number');
  if (countNumber) {
    countNumber.textContent = count;
  }
  
  // Update button state
  if (count >= 3) {
    analyzeButton.disabled = false;
    analyzeButton.classList.remove('btn-secondary');
    analyzeButton.classList.add('btn-primary');
  } else {
    analyzeButton.disabled = true;
  }
  
  console.log('Selected count updated:', count);
}

// Social sharing functionality
function setupSocialSharing() {
  if (!window.currentStyleProfile) {
    alert('Please wait for your profile to generate.');
    return;
  }
  
  const { title, summary } = window.currentStyleProfile;
  const shareText = `I'm a "${title}" according to Architecture Helper! ${summary}`;
  const shareUrl = `${window.location.href} - Find your own architectural style!`;
  
  return { shareText, shareUrl };
}

document.getElementById('share-twitter-btn').addEventListener('click', function() {
  const { shareText, shareUrl } = setupSocialSharing();
  if (!shareText) return;
  
  const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText + ' ' + shareUrl)}`;
  window.open(twitterUrl, '_blank');
});

document.getElementById('share-facebook-btn').addEventListener('click', function() {
  const { shareText, shareUrl } = setupSocialSharing();
  if (!shareText) return;
  
  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&quote=${encodeURIComponent(shareText + ' Find your own architectural style!')}`;
  window.open(facebookUrl, '_blank');
});

document.getElementById('share-linkedin-btn').addEventListener('click', function() {
  const { shareText, shareUrl } = setupSocialSharing();
  if (!shareText) return;
  
  const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(window.location.href)}&summary=${encodeURIComponent(shareText + ' Find your own architectural style!')}`;
  window.open(linkedinUrl, '_blank');
});

// View tour functionality
document.getElementById('view-tour-btn').addEventListener('click', function() {
  // Get building IDs from selected buildings
  const buildingIds = Array.from(selectedBuildings.keys());
  
  if (buildingIds.length === 0) {
    alert('No buildings selected for tour.');
    return;
  }
  
  // Close the current modal and show tour preview
  $('#styleProfileModal').modal('hide');
  
  setTimeout(() => {
    showTourPreview(buildingIds);
  }, 300);
});

function showTourPreview(buildingIds) {
  // Create a simple tour modal
  const tourModal = document.createElement('div');
  tourModal.className = 'modal fade';
  tourModal.id = 'styleTourModal';
  tourModal.innerHTML = `
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="fas fa-route mr-2"></i>Your Architectural Style Tour
          </h5>
          <button type="button" class="close" data-dismiss="modal">
            <span>&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="text-center mb-4">
            <h6 class="text-muted">Experience your ${buildingIds.length} selected buildings in a guided tour</h6>
            <p class="small text-muted">This preview shows how a full tour would work with the existing carousel component</p>
          </div>
          
          <div class="tour-preview-grid row">
            ${Array.from(selectedBuildings.entries()).map(([buildingId, styles], index) => {
              const buildingCard = document.querySelector(`[data-building-id="${buildingId}"]`).closest('.building-card');
              const imgSrc = buildingCard.querySelector('.square-image').src;
              
              return `
                <div class="col-md-6 mb-3">
                  <div class="card h-100">
                    <img src="${imgSrc}" class="card-img-top" style="height: 200px; object-fit: cover;" alt="Building ${index + 1}">
                    <div class="card-body">
                      <h6 class="card-title">Stop ${index + 1}</h6>
                      <div class="mb-2">
                        ${styles.slice(0, 3).map(style => `
                          <span class="badge badge-secondary mr-1">${style}</span>
                        `).join('')}
                      </div>
                      <a href="/architecture_explorer/${buildingId}" class="btn btn-sm btn-primary" target="_blank">
                        <i class="fas fa-eye mr-1"></i> View Analysis
                      </a>
                    </div>
                  </div>
                </div>
              `;
            }).join('')}
          </div>
          
          <div class="text-center mt-4 p-3 bg-light rounded">
            <h6 class="mb-2">Coming Soon: Full Tour Experience</h6>
            <p class="small text-muted mb-3">
              The complete tour will include navigation between buildings, detailed architectural analysis, 
              interactive maps, and downloadable tour guides - all integrated with our existing places tour system.
            </p>
            <div class="d-flex justify-content-center gap-2">
              <button class="btn btn-outline-primary btn-sm" disabled>
                <i class="fas fa-map mr-1"></i> Interactive Map
              </button>
              <button class="btn btn-outline-primary btn-sm" disabled>
                <i class="fas fa-download mr-1"></i> Tour Guide
              </button>
              <button class="btn btn-outline-primary btn-sm" disabled>
                <i class="fas fa-route mr-1"></i> Optimized Route
              </button>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close Preview</button>
          <button type="button" class="btn btn-primary" onclick="window.open('/building_library', '_blank')">
            <i class="fas fa-building mr-1"></i> Explore More Buildings
          </button>
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(tourModal);
  $(tourModal).modal('show');
  
  // Clean up when modal is closed
  $(tourModal).on('hidden.bs.modal', function() {
    document.body.removeChild(tourModal);
  });
}

console.log('Event listeners set up');
  });
</script>
</body>
</html>