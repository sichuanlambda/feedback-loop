<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Development Estimations</title>
    <style>
      .estimation-container {
        background: #FFFFFF;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        max-width: 1000px;
        margin: 40px auto;
      }

      .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1a1a1a;
        margin-bottom: 1rem;
        text-align: center;
      }

      .subtitle {
        color: #666;
        font-size: 1.1rem;
        text-align: center;
        margin-bottom: 2.5rem;
      }

      .input-group {
        display: flex;
        gap: 12px;
        justify-content: center;
        align-items: center;
        margin-bottom: 30px;
      }

      .address-input {
        flex: 0 1 400px;
        padding: 12px 20px;
        border: 2px solid #e1e1e1;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.02);
      }

      .address-input:focus {
        border-color: #0056b3;
        box-shadow: 0 0 0 3px rgba(0, 86, 179, 0.1);
        outline: none;
      }

      .btn {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
      }

      .btn-fetch {
        background: #0056b3;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 86, 179, 0.2);
      }

      .btn-fetch:hover {
        background: #004494;
        transform: translateY(-1px);
        box-shadow: 0 6px 8px rgba(0, 86, 179, 0.25);
      }

      .btn-generate {
        background: #28a745;
        color: white;
        box-shadow: 0 4px 6px rgba(40, 167, 69, 0.2);
        margin-top: 20px;
      }

      .btn-generate:hover {
        background: #218838;
        transform: translateY(-1px);
        box-shadow: 0 6px 8px rgba(40, 167, 69, 0.25);
      }

      .image-preview-container {
        margin: 20px auto;
        max-width: 600px;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      }

      #image-preview {
        width: 100%;
        height: auto;
        display: block;
        border-radius: 16px;
      }

      .loader-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
        margin-top: 30px;
      }

      .loader {
        border: 3px solid #f3f3f3;
        border-radius: 50%;
        border-top: 3px solid #0056b3;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
      }

      #loading-text {
        color: #666;
        font-size: 1rem;
        font-weight: 500;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      .button-container {
        display: flex;
        justify-content: center;
        width: 100%;
        margin: 20px 0;
      }

      .results-container {
        margin-top: 30px;
        padding: 25px;
        border-radius: 16px;
        background: #f8f9fa;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        display: none;
      }

      .results-container.show {
        display: block;
        animation: fadeIn 0.5s ease-in-out;
      }

      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }

      .prompt-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 12px;
      }
      
      .prompt-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
      }
      
      .mode-selection {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .output-label {
        font-size: 0.9rem;
        color: #666;
      }

      .mode-buttons {
        display: flex;
        gap: 10px;
      }

      .mode-btn {
        background: #fff;
        padding: 6px 12px;
        border-radius: 6px;
        cursor: pointer;
        border: 1px solid #dee2e6;
        font-size: 0.9rem;
        transition: all 0.2s ease;
      }

      .mode-btn:hover {
        background: #f8f9fa;
      }

      .mode-btn.active {
        background: #0056b3;
        color: white;
        border-color: #0056b3;
      }

      .preset-prompts {
        margin-bottom: 15px;
      }

      .preset-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
      }

      .preset-btn {
        background: #fff;
        border: 1px solid #dee2e6;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .preset-btn:hover {
        background: #e9ecef;
        border-color: #adb5bd;
      }

      .preset-btn.active {
        background: #0056b3;
        color: white;
        border-color: #0056b3;
      }
    </style>
</head>
<div class="estimation-container">
  <h1 class="page-title">Development Estimations</h1>
  <p class="subtitle">Analyze development potential and get estimations based on satellite imagery</p>

  <% if user_signed_in? %>
    <%= form_with url: generate_development_estimation_path, local: true, html: { class: "gpt-form-container" } do |form| %>
      <div class="input-group">
        <%= form.text_field :address, class: 'address-input', placeholder: "Enter address", id: "address" %>
        <button id="fetch-satellite-view" class="btn btn-fetch">Fetch Satellite View</button>
      </div>

      <!-- Combined Prompt Section -->
      <div class="prompt-section mt-4">
        <div class="prompt-header">
          <h3>Analysis Prompt</h3>
          <div class="mode-selection">
            <span class="output-label">Output:</span>
            <div class="mode-buttons">
              <button type="button" class="mode-btn active" data-mode="report">Report</button>
              <button type="button" class="mode-btn" data-mode="metrics">Metrics</button>
              <input type="hidden" name="analysis_mode" id="analysis_mode" value="report">
            </div>
          </div>
        </div>

        <!-- Preset Prompts -->
        <div class="preset-prompts mb-3">
          <label class="small text-muted mb-2">Quick Analysis Options:</label>
          <div class="preset-buttons">
            <button type="button" class="preset-btn" data-prompt="Count the number of trees in the image.">Tree Count</button>
            <button type="button" class="preset-btn" data-prompt="Calculate the number of parking spots and estimate the total parking coverage as a percentage of the visible area.">Parking Analysis</button>
            <button type="button" class="preset-btn" data-prompt="Analyze the tree coverage percentage and distribution across the property.">Tree Coverage</button>
            <button type="button" class="preset-btn" data-prompt="Identify and analyze all nearby buildings, their approximate size, and usage type.">Nearby Buildings</button>
            <button type="button" class="preset-btn" data-prompt="Locate and assess all entry and exit points, including driveways and access routes.">Access Points</button>
            <button type="button" class="preset-btn" data-prompt="Evaluate the development potential including zoning implications and possible improvements.">Development Potential</button>
            <button type="button" class="preset-btn" data-prompt="Assess pedestrian infrastructure including sidewalks, crossings, and walkability factors.">Pedestrian Infrastructure</button>
            <button type="button" class="preset-btn" data-prompt="">Custom</button>
          </div>
        </div>

        <div class="form-group">
          <%= form.text_area :custom_prompt, 
              class: 'form-control',
              id: 'custom_prompt',
              rows: 6,
              placeholder: "Enter your analysis prompt or select from the options above..." %>
        </div>
      </div>

      <div class="image-preview-container">
        <img id="image-preview" alt="Image Preview" style="display: none;"/>
      </div>
      <%= hidden_field_tag :previewed_image_url, nil, id: "previewedImageUrl" %>
      
      <div class="button-container">
        <% if current_user.subscription_status != 'active' && current_user.credits <= 0 %>
          <%= link_to "Subscribe to Generate Estimation", account_path, class: "btn btn-generate" %>
        <% else %>
          <%= form.submit "Get Development Estimation", class: "btn btn-generate", id: "generate-estimation", style: "display: none;" %>
        <% end %>
      </div>
    <% end %>
  <% else %>
    <p class="text-center">Please <%= link_to 'sign in', new_user_session_path %> to use this feature.</p>
  <% end %>

  <div class="loader-container">
    <div id="loading-text" style="display: none;">Analyzing development potential...</div>
    <div class="loader" style="display: none;"></div>
  </div>

  <div class="results-container" id="results-container">
    <!-- Results will be inserted here -->
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Mode selection handling
  const modeButtons = document.querySelectorAll('.mode-btn');
  const modeInput = document.getElementById('analysis_mode');

  modeButtons.forEach(button => {
    button.addEventListener('click', function() {
      modeButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      modeInput.value = this.dataset.mode;
      console.log('Mode changed to:', this.dataset.mode);
    });
  });

  // Preset prompt buttons
  const presetButtons = document.querySelectorAll('.preset-btn');
  const promptTextarea = document.getElementById('custom_prompt');

  presetButtons.forEach(button => {
    button.addEventListener('click', function() {
      presetButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      promptTextarea.value = this.dataset.prompt;
    });
  });

  // Fetch Satellite View button handler
  document.getElementById('fetch-satellite-view').addEventListener('click', function(e) {
    e.preventDefault();  // Prevent form submission
    e.stopPropagation(); // Stop event bubbling
    
    var address = document.getElementById('address').value;
    if (address) {
      var proxyUrl = `/proxy/fetch_satellite_view?location=${encodeURIComponent(address)}`;
      
      fetch(proxyUrl)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.blob();
        })
        .then(blob => {
          var reader = new FileReader();
          reader.onloadend = function() {
            var base64data = reader.result;
            
            var output = document.getElementById('image-preview');
            output.src = base64data;
            output.style.display = 'block';
            
            var hiddenInput = document.getElementById('previewedImageUrl');
            hiddenInput.value = base64data;
            
            // Show the generate button
            var generateButton = document.getElementById('generate-estimation');
            if (generateButton) {
              generateButton.style.display = 'block';
            }
          }
          reader.readAsDataURL(blob);
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to fetch satellite image. Please try again.');
        });
    } else {
      alert('Please enter an address first.');
    }
    
    return false;  // Prevent default behavior
  });

  // Form submission
  const form = document.querySelector('.gpt-form-container');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      var imageData = document.getElementById('previewedImageUrl').value;
      if (!imageData) {
        alert('Please fetch a satellite view before generating estimation.');
        return false;
      }
      
      showLoading();

      fetch(this.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        },
        body: JSON.stringify({
          previewed_image_url: imageData,
          address: document.getElementById('address').value,
          custom_prompt: document.getElementById('custom_prompt').value,
          analysis_mode: document.getElementById('analysis_mode').value
        })
      })
      .then(response => response.json())
      .then(data => {
        hideLoading();
        if (data.success) {
          showResults(data.estimation);
        } else {
          alert('Error: ' + (data.error || 'Failed to generate estimation'));
        }
      })
      .catch(error => {
        hideLoading();
        alert('Error: ' + error.message);
      });
    });
  }

  function showLoading() {
    document.querySelector('.loader').style.display = 'block';
    document.getElementById('loading-text').style.display = 'block';
  }

  function hideLoading() {
    document.querySelector('.loader').style.display = 'none';
    document.getElementById('loading-text').style.display = 'none';
  }

  function showResults(html) {
    const resultsContainer = document.getElementById('results-container');
    resultsContainer.innerHTML = html;
    resultsContainer.classList.add('show');
    resultsContainer.scrollIntoView({ behavior: 'smooth' });
  }
});
</script>
</body>
</html>
