<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <title>Architecture Explorer Map</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css">
    <script src="https://unpkg.com/supercluster@7.1.2/dist/supercluster.min.js"></script>
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 60px; bottom: 0; left: 0; right: 0; width: 100%; height: calc(100% - 60px); }
        #sidebar {
            position: absolute;
            top: 60px;
            right: 0;
            bottom: 0;
            width: 400px;
            background: white;
            overflow-y: auto;
            padding: 0;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            height: calc(100% - 60px);
            transition: right 0.3s ease;
            z-index: 10;
        }
        
        #sidebar.closed {
            right: -400px;
        }
        
        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 20px 15px 20px;
            border-bottom: 1px solid #e9ecef;
            background: #f8f9fa;
        }
        
        .sidebar-header h2 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }
        
        .sidebar-toggle {
            background: #6c757d;
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }
        
        .sidebar-toggle:hover {
            background: #5a6268;
        }
        
        .sidebar-open-btn {
            position: absolute;
            top: 80px;
            right: 20px;
            background: #6c757d;
            color: white;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 20px;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            transition: all 0.2s;
            z-index: 5;
        }
        
        .sidebar-open-btn:hover {
            background: #5a6268;
            transform: scale(1.1);
        }
        
        .sidebar-open-btn.hidden {
            display: none;
        }
        
        #building-list {
            list-style-type: none;
            padding: 20px;
            margin: 0;
        }
        .building-item {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }
        .building-item h4 {
            margin: 0 0 15px 0;
            font-size: 18px;
            color: #333;
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
        }
        .mapboxgl-popup-content {
            padding: 20px;
            max-width: 600px;
            width: 300px;
        }
        .popup-content h3 {
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 20px;
        }
        .styles-container {
            margin: 15px 0;
        }
        .badge {
            display: inline-block;
            padding: 5px 10px;
            margin: 3px;
            background-color: #007bff;
            color: white;
            border-radius: 15px;
            font-size: 14px;
        }
        .popup-content img, .building-item img {
            margin-top: 15px;
            margin-bottom: 15px;
            width: 100%;
            height: auto;
            max-height: 200px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .button-container {
            text-align: center;
            margin-top: 20px;
        }
        .view-details-btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.2s;
        }
        .view-details-btn:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
            color: white;
        }
        .cluster-marker {
            background-color: #007bff;
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
        }
        #filter-container {
            position: absolute;
            top: 70px;
            left: 10px;
            z-index: 1;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            width: 400px;
            border: 1px solid #e1e5e9;
        }
        
        .filter-section {
            margin-bottom: 15px;
        }
        
        .filter-section h4 {
            margin: 0 0 15px 0;
            font-size: 16px;
            font-weight: 600;
            color: #555;
        }
        
        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            max-height: 120px;
            overflow-y: auto;
        }
        
        .style-option {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 20px;
            padding: 8px 16px;
            font-size: 13px;
            cursor: pointer;
            transition: all 0.2s;
            user-select: none;
            white-space: nowrap;
        }
        
        .style-option:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }
        
        .style-option.selected {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
        
        .search-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #007bff;
        }
        
        .filter-results {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #e9ecef;
            text-align: center;
        }
        
        #results-count {
            font-size: 12px;
            color: #6c757d;
        }
        #style-switcher {
            position: absolute;
            top: 200px;
            left: 10px;
            z-index: 1;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
        }
        
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
            margin-right: 10px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }

        input:checked + .slider {
            background-color: #2196F3;
        }
        
        input:focus + .slider {
            box-shadow: 0 0 1px #2196F3;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .slider.round {
            border-radius: 34px;
        }

        .slider.round:before {
            border-radius: 50%;
        }
        
        #style-label {
            vertical-align: middle;
            line-height: 34px;
            font-size: 14px;
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="sidebar">
        <div class="sidebar-header">
            <h2>Buildings in View</h2>
            <button id="sidebar-toggle" class="sidebar-toggle">×</button>
        </div>
        <ul id="building-list"></ul>
    </div>
    <div id="filter-container">
        <div class="filter-section">
            <h4>Architectural Styles</h4>
            <div class="filter-options" id="style-options">
                <!-- Style options will be dynamically populated -->
            </div>
        </div>
    </div>
    <div id="style-switcher">
        <label class="switch">
            <input type="checkbox" id="style-toggle">
            <span class="slider round"></span>
        </label>
        <span id="style-label">Streets</span>
    </div>
    <button id="sidebar-open-btn" class="sidebar-open-btn">☰</button>
    <div id="loading" style="position: absolute; top: 70px; left: 10px; background: white; padding: 5px;">Loading...</div>

    <script>
  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM Content Loaded");

    try {
      const mapboxAccessToken = '<%= @mapbox_access_token %>';
      console.log("Mapbox Access Token:", mapboxAccessToken);

      if (!mapboxAccessToken) {
        throw new Error("Mapbox Access Token is not set");
      }

      mapboxgl.accessToken = mapboxAccessToken;

      console.log("Creating map");
      const map = new mapboxgl.Map({
          container: 'map',
          style: 'mapbox://styles/mapbox/streets-v9', // Initial style: streets view
          center: [-104.9903, 39.7392], // Denver coordinates
          zoom: 12 // A good initial zoom level for a city view
      });

      console.log("Map created");

      const buildings = <%= raw @building_analyses.to_json %>;
      const markers = [];
      const buildingList = document.getElementById('building-list');
      const styleOptions = document.getElementById('style-options');
      const sidebar = document.getElementById('sidebar');
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebarOpenBtn = document.getElementById('sidebar-open-btn');

      const styleToggle = document.getElementById('style-toggle');
      const styleLabel = document.getElementById('style-label');

      // Filter state
      let activeFilters = {
        styles: []
      };

      // Populate style filter options as clickable buttons
      const allStyles = new Set();
      buildings.forEach(building => {
          building.h3_contents.forEach(style => allStyles.add(style));
      });
      
      allStyles.forEach(style => {
          const option = document.createElement('div');
          option.className = 'style-option';
          option.textContent = style;
          option.dataset.style = style;
          option.addEventListener('click', function() {
              this.classList.toggle('selected');
              updateActiveFilters();
              updateMarkers();
              updateBuildingList();
          });
          styleOptions.appendChild(option);
      });

      function updateActiveFilters() {
          activeFilters.styles = Array.from(document.querySelectorAll('.style-option.selected'))
              .map(option => option.dataset.style);
      }

      function filterBuildings(buildings) {
          return buildings.filter(building => {
              // Style filter
              if (activeFilters.styles.length > 0) {
                  const buildingStyles = building.h3_contents || [];
                  if (!activeFilters.styles.some(style => buildingStyles.includes(style))) {
                      return false;
                  }
              }

              return true;
          });
      }

      styleToggle.addEventListener('change', function() {
          if (this.checked) {
              map.setStyle('mapbox://styles/mapbox/satellite-v9');
              styleLabel.textContent = 'Satellite';
          } else {
              map.setStyle('mapbox://styles/mapbox/streets-v9');
              styleLabel.textContent = 'Streets';
          }
      });

      // Create a new supercluster instance
      const supercluster = new Supercluster({
          radius: 40,
          maxZoom: 16
      });

      function updateMarkers() {
          const newMarkers = [];
          const bounds = map.getBounds();
          const zoom = map.getZoom();
          const filteredBuildings = filterBuildings(buildings);
          
          // Create points from filtered buildings
          const points = filteredBuildings.map(building => ({
              type: 'Feature',
              properties: { id: building.id, ...building },
              geometry: {
                  type: 'Point',
                  coordinates: [building.longitude, building.latitude]
              }
          })).filter(point => point.geometry.coordinates[0] && point.geometry.coordinates[1]);

          // Load the points into the supercluster
          supercluster.load(points);
          
          const clusters = supercluster.getClusters(
              [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()],
              Math.floor(zoom)
          );

          // Remove existing markers
          markers.forEach(marker => marker.remove());
          markers.length = 0;

          clusters.forEach(cluster => {
              const [longitude, latitude] = cluster.geometry.coordinates;

              if (cluster.properties.cluster) {
                  // Create a cluster marker
                  const el = document.createElement('div');
                  el.className = 'cluster-marker';
                  el.style.width = el.style.height = `${30 + (cluster.properties.point_count / points.length) * 20}px`;
                  el.innerText = cluster.properties.point_count;

                  const marker = new mapboxgl.Marker(el)
                      .setLngLat([longitude, latitude])
                      .addTo(map);

                  newMarkers.push(marker);
              } else {
                  // Create a single building marker
                  const building = cluster.properties;
                  const stylesHtml = building.h3_contents.map(style => `<span class="badge">${style}</span>`).join('');

                  const marker = new mapboxgl.Marker()
                      .setLngLat([longitude, latitude])
                      .setPopup(new mapboxgl.Popup().setHTML(`
                          <div class="popup-content">
                              <h3>${building.address || 'No address'}</h3>
                              <img src="${building.image_url}" alt="Building Analysis" width="100%">
                              <div class="styles-container">
                                  <strong>Architectural Styles:</strong><br>
                                  ${stylesHtml || '<span>Unknown</span>'}
                              </div>
                              <div class="button-container">
                                  <a href="/architecture_explorer/${building.id}" class="view-details-btn">View Full Analysis</a>
                              </div>
                          </div>
                      `))
                      .addTo(map);

                  newMarkers.push(marker);
              }
          });

          markers.push(...newMarkers);
      }

      function updateBuildingList() {
        const bounds = map.getBounds();
        buildingList.innerHTML = '';
        const filteredBuildings = filterBuildings(buildings);
        
        filteredBuildings.forEach((building) => {
          if (building.latitude && building.longitude &&
              bounds.contains([building.longitude, building.latitude])) {
            const li = document.createElement('li');
            li.className = 'building-item';
            const stylesHtml = building.h3_contents.map(style => `<span class="badge">${style}</span>`).join('');
            li.innerHTML = `
              <h4>${building.address || 'No address'}</h4>
              <img src="${building.image_url}" alt="Building Analysis" width="100%">
              <div class="styles-container">
                <strong>Architectural Styles:</strong><br>
                ${stylesHtml || '<span>No styles available</span>'}
              </div>
              <div class="button-container">
                <a href="/architecture_explorer/${building.id}" class="view-details-btn">View Full Analysis</a>
              </div>
            `;
            buildingList.appendChild(li);
          }
        });
      }

      map.on('load', function () {
        console.log("Map loaded, adding building markers...");
        
        updateMarkers();
        updateBuildingList();

        document.getElementById('loading').style.display = 'none';

        // Focus on Denver
        const denverCenter = [-104.9903, 39.7392];
        const denverZoom = 12;

        map.flyTo({
          center: denverCenter,
          zoom: denverZoom,
          essential: true
        });

        map.on('moveend', () => {
            updateMarkers();
            updateBuildingList();
        });
      });

      // Sidebar toggle functionality
      function openSidebar() {
          sidebar.classList.remove('closed');
          sidebarOpenBtn.classList.add('hidden');
      }

      function closeSidebar() {
          sidebar.classList.add('closed');
          sidebarOpenBtn.classList.remove('hidden');
      }

      sidebarToggle.addEventListener('click', closeSidebar);
      sidebarOpenBtn.addEventListener('click', openSidebar);

      // Set sidebar to default expanded state
      sidebar.classList.remove('closed');
      sidebarOpenBtn.classList.add('hidden');

    } catch (error) {
      console.error("An error occurred:", error);
      document.getElementById('loading').innerHTML = "Error loading map: " + error.message;
    }
  });
</script>

</body>
</html>