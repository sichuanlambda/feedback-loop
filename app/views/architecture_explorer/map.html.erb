<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <title>Architecture Explorer Map</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css">
    <script src="https://unpkg.com/supercluster@7.1.2/dist/supercluster.min.js"></script>
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 60px; bottom: 0; left: 0; right: 400px; width: calc(100% - 400px); height: calc(100% - 60px); }
        #sidebar {
            position: absolute;
            top: 60px;
            right: 0;
            bottom: 0;
            width: 400px;
            background: white;
            overflow-y: auto;
            padding: 20px;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            height: calc(100% - 60px);
        }
        #building-list {
            list-style-type: none;
            padding: 0;
        }
        .building-item {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }
        .building-item h4 {
            margin: 0 0 15px 0;
            font-size: 18px;
            color: #333;
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
        }
        .mapboxgl-popup-content {
            padding: 20px;
            max-width: 600px;
            width: 300px;
        }
        .popup-content h3 {
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 20px;
        }
        .styles-container {
            margin: 15px 0;
        }
        .badge {
            display: inline-block;
            padding: 5px 10px;
            margin: 3px;
            background-color: #007bff;
            color: white;
            border-radius: 15px;
            font-size: 14px;
        }
        .popup-content img, .building-item img {
            margin-top: 15px;
            margin-bottom: 15px;
            width: 100%;
            height: auto;
            max-height: 200px;
            object-fit: cover;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .button-container {
            text-align: center;
            margin-top: 20px;
        }
        .view-details-btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.2s;
        }
        .view-details-btn:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
            color: white;
        }
        .cluster-marker {
            background-color: #007bff;
            border-radius: 50%;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
        }
        #filter-container {
            position: absolute;
            top: 70px;
            left: 10px;
            z-index: 1;
            background: white;
            padding: 15px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 280px;
        }
        #style-filter {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
        }
        .filter-title {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
        }
        .filter-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }
        .filter-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        #apply-filter {
            background-color: #007bff;
            color: white;
        }
        #apply-filter:hover {
            background-color: #0056b3;
        }
        #reset-filter {
            background-color: #6c757d;
            color: white;
        }
        #reset-filter:hover {
            background-color: #5a6268;
        }
        .style-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            margin-right: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        .style-btn:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="sidebar">
        <h2>Buildings in View</h2>
        <ul id="building-list"></ul>
    </div>
    <div id="filter-container">
        <h3 class="filter-title">Filter by Architectural Style</h3>
        <select id="style-filter" multiple>
            <!-- Options will be dynamically populated -->
        </select>
        <div class="filter-buttons">
            <button id="apply-filter" class="filter-btn">Apply Filter</button>
            <button id="reset-filter" class="filter-btn">Reset Filters</button>
        </div>
        <div id="style-switcher" style="margin-top: 15px;">
            <button id="streets-style" class="style-btn">Streets</button>
            <button id="satellite-style" class="style-btn">Satellite</button>
        </div>
    </div>
    <div id="loading" style="position: absolute; top: 70px; left: 10px; background: white; padding: 5px;">Loading...
    </div>

    <script>
  document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM Content Loaded");

    try {
      const mapboxAccessToken = '<%= @mapbox_access_token %>';
      console.log("Mapbox Access Token:", mapboxAccessToken);

      if (!mapboxAccessToken) {
        throw new Error("Mapbox Access Token is not set");
      }

      mapboxgl.accessToken = mapboxAccessToken;

      console.log("Creating map");
      const map = new mapboxgl.Map({
          container: 'map',
          style: 'mapbox://styles/mapbox/streets-v9', // Initial style: streets view
          center: [-104.9903, 39.7392], // Denver coordinates
          zoom: 12 // A good initial zoom level for a city view
      });

      console.log("Map created");

      const buildings = <%= raw @building_analyses.to_json %>;
      const markers = [];
      const buildingList = document.getElementById('building-list');
      const styleFilter = document.getElementById('style-filter');

      // Add buttons for switching between street and satellite views
      const streetsBtn = document.getElementById('streets-style');
      const satelliteBtn = document.getElementById('satellite-style');

      // Event listeners for switching styles
      streetsBtn.addEventListener('click', function () {
        map.setStyle('mapbox://styles/mapbox/streets-v9');
      });

      satelliteBtn.addEventListener('click', function () {
        map.setStyle('mapbox://styles/mapbox/satellite-v9');
      });

      // Populate style filter options
      const allStyles = new Set();
      buildings.forEach(building => {
          building.h3_contents.forEach(style => allStyles.add(style));
      });
      allStyles.forEach(style => {
          const option = document.createElement('option');
          option.value = style;
          option.textContent = style;
          styleFilter.appendChild(option);
      });

      // Create a new supercluster instance
      const supercluster = new Supercluster({
          radius: 40,
          maxZoom: 16
      });

      // Prepare the GeoJSON features for the supercluster
      const points = buildings.map(building => ({
          type: 'Feature',
          properties: { id: building.id, ...building },
          geometry: {
              type: 'Point',
              coordinates: [building.longitude, building.latitude]
          }
      })).filter(point => point.geometry.coordinates[0] && point.geometry.coordinates[1]);

      // Load the points into the supercluster
      supercluster.load(points);

      function updateMarkers() {
          const newMarkers = [];
          const bounds = map.getBounds();
          const zoom = map.getZoom();
          const clusters = supercluster.getClusters(
              [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()],
              Math.floor(zoom)
          );

          // Remove existing markers
          markers.forEach(marker => marker.remove());
          markers.length = 0;

          const selectedStyles = Array.from(styleFilter.selectedOptions).map(option => option.value);

          clusters.forEach(cluster => {
              const [longitude, latitude] = cluster.geometry.coordinates;

              if (cluster.properties.cluster) {
                  // Create a cluster marker
                  const el = document.createElement('div');
                  el.className = 'cluster-marker';
                  el.style.width = el.style.height = `${30 + (cluster.properties.point_count / points.length) * 20}px`;
                  el.innerText = cluster.properties.point_count;

                  const marker = new mapboxgl.Marker(el)
                      .setLngLat([longitude, latitude])
                      .addTo(map);

                  newMarkers.push(marker);
              } else {
                  // Create a single building marker
                  const building = cluster.properties;
                  if (selectedStyles.length === 0 || building.h3_contents.some(style => selectedStyles.includes(style))) {
                      const stylesHtml = building.h3_contents.map(style => `<span class="badge">${style}</span>`).join('');

                      const marker = new mapboxgl.Marker()
                          .setLngLat([longitude, latitude])
                          .setPopup(new mapboxgl.Popup().setHTML(`
                              <div class="popup-content">
                                  <h3>${building.address || 'No address'}</h3>
                                  <img src="${building.street_view_url}" alt="Street View" width="100%">
                                  <div class="styles-container">
                                      <strong>Architectural Styles:</strong><br>
                                      ${stylesHtml || '<span>Unknown</span>'}
                                  </div>
                                  <div class="button-container">
                                      <a href="/architecture_explorer/${building.id}" class="view-details-btn">View Full Analysis</a>
                                  </div>
                              </div>
                          `))
                          .addTo(map);

                      newMarkers.push(marker);
                  }
              }
          });

          markers.push(...newMarkers);
      }

      function updateBuildingList() {
        const bounds = map.getBounds();
        buildingList.innerHTML = '';
        const selectedStyles = Array.from(styleFilter.selectedOptions).map(option => option.value);
        buildings.forEach((building) => {
          if (building.latitude && building.longitude &&
              bounds.contains([building.longitude, building.latitude]) &&
              (selectedStyles.length === 0 || building.h3_contents.some(style => selectedStyles.includes(style)))) {
            const li = document.createElement('li');
            li.className = 'building-item';
            const stylesHtml = building.h3_contents.map(style => `<span class="badge">${style}</span>`).join('');
            li.innerHTML = `
              <h4>${building.address || 'No address'}</h4>
              <img src="${building.street_view_url}" alt="Street View" width="100%">
              <div class="styles-container">
                <strong>Architectural Styles:</strong><br>
                ${stylesHtml || '<span>No styles available</span>'}
              </div>
              <div class="button-container">
                <a href="/architecture_explorer/${building.id}" class="view-details-btn">View Full Analysis</a>
              </div>
            `;
            buildingList.appendChild(li);
          }
        });
      }

      map.on('load', function () {
        console.log("Map loaded, adding building markers...");
        
        updateMarkers();
        updateBuildingList();

        document.getElementById('loading').style.display = 'none';

        // Focus on Denver
        const denverCenter = [-104.9903, 39.7392];
        const denverZoom = 12;

        map.flyTo({
          center: denverCenter,
          zoom: denverZoom,
          essential: true
        });

        map.on('moveend', () => {
            updateMarkers();
            updateBuildingList();
        });

        const applyFilterBtn = document.getElementById('apply-filter');
        const resetFilterBtn = document.getElementById('reset-filter');

        applyFilterBtn.addEventListener('click', () => {
            updateMarkers();
            updateBuildingList();
        });

        resetFilterBtn.addEventListener('click', () => {
            styleFilter.selectedIndex = -1; // Deselect all options
            updateMarkers();
            updateBuildingList();
        });
      });

    } catch (error) {
      console.error("An error occurred:", error);
      document.getElementById('loading').innerHTML = "Error loading map: " + error.message;
    }
  });
</script>

</body>
</html>