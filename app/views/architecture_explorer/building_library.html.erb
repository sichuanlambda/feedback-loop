<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Validator - Home</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-M4TLZ8N6CC"></script>
    <script defer data-domain="architecturehelper.com" src="https://plausible.io/js/script.js"></script>
    <style>
      .container{
        padding: 30px 0;
        width: 90%; /* Full width of the column */
      }
      body {
          background-color: #E8E8E8; /* Sets the entire page background to black */
      }
        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); /* Adjust '150px' to change the cell size */
            gap: 10px; /* Spacing between grid items */
        }

        .grid-item {
            display: flex; /* Use flexbox */
            flex-direction: column; /* Stack children vertically */
            align-items: center; /* Center children horizontally */
            justify-content: flex-start; /* Align children to the start of the flex container */
            text-align: center; /* Center text */
            overflow: hidden; /* Hide parts of the image that exceed the container size */
            margin-bottom: 20px; /* Space below each grid item */
            height: auto; /* Adjust height automatically */
        }

        .submission-image {
            width: 160px; /* Set a fixed width */
            height: 160px; /* Set a fixed height, equal to the width for a square */
            object-fit: cover; /* This will ensure the image covers the area, keeping its aspect ratio */
            margin-bottom: 0px; /* Space between image and button */
        }
        h1 {
          text-align: center;
          margin: 10px;
        }
        .button-container {
            text-align: center; /* Center the buttons */
            margin-bottom: 20px; /* Space between buttons and grid */
        }
        .btn-primary{
          width: 30%; /* Make buttons take full width of the container */
          background-color: #0056b3;
          color: white;
          border-radius: 20px;
          padding: 10px 20px;
          font-size: 18px;
          text-align: center;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          transition: all 0.3s ease;
          border: none;
          margin: 10px; /* Add spacing between buttons */
        }
        .btn-primary:hover {
          background-color: #004080; /* Darker blue on hover */
        }
        .btn-secondary {
            background-color: #E8E8E8;
            color: #0056b3; /* Adjust the color to match your theme */
            border: 2px solid #0056b3; /* Blue border */
            border-radius: 20px;
            padding: 10px 20px;
            font-size: 18px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            margin: 10px
        }

        .btn-secondary:hover {
            background-color: #f0f0f0; /* Light grey for hover effect, adjust as needed */
            color: #003366; /* Darker blue for hover text */
            border-color: #003366; /* Darker blue for hover border */
        }
        .grid-btn {
            width: 160px; /* Set a fixed width */
            background-color: #E8E8E8;
            color: #0056b3;
            border: 1px solid #0056b3;
            border-top: none; /* Remove top border */
            padding: 10px 10px;
            font-size: 12px;
            text-align: center;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            display: inline-block;
            text-decoration: none;
            margin: 0; /* Remove margin */
            border-radius: 0 0 10px 10px; /* Rounded corners at the bottom only */
            white-space: nowrap; /* Prevents the text from wrapping */
            overflow: hidden; /* Hides text that overflows the button's width */
            text-overflow: ellipsis; /* Adds an ellipsis to text that overflows */
            max-width: 100%;
        }
        .search-bar {
            width: 80; /* Adjust as needed */
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .form-inline .form-control {
                width: 100%; /* Full width for search bar on smaller screens */
                margin-bottom: 10px; /* Margin for spacing */
            }

            .form-inline .btn-sm {
                width: 100%; /* Full width for button on smaller screens */
            }
        }
        .modal-body {
            display: flex; /* Enable flexbox */
            justify-content: center; /* Center content horizontally */
            align-items: center; /* Center content vertically */
            text-align: center; /* Ensure text is centered, if any */
            height: 100%; /* Optional: Set a specific height if needed */
        }
        #modalImage {
            max-width: 100%; /* Ensures image is not larger than the container */
            max-height: 600px; /* Set a maximum height for the image */
            margin: auto; /* Add automatic margins to center the image */
        }

        .modal-footer {
            justify-content: ce
            nter; /* Centers the button in the modal footer */
        }
        #modalTags {
            display: flex; /* Use flexbox for layout */
            flex-wrap: wrap; /* Allow tags to wrap to the next line */
            justify-content: center; /* Center tags horizontally */
            margin-top: 10px; /* Add some space above the tags */
            margin-bottom: 10px; /* Add some space above the tags */
        }

        #modalTags .badge {
            margin: 2px; /* Add a little space around each tag */
        }
</style>
<body>
<!-- Modal Structure -->
<div id="imagePreviewModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Building Preview</h5>
            </div>
            <div class="modal-body">
                <img id="modalImage" src="" class="img-fluid" alt="Preview"/>
            </div>
                <!-- Container for tags -->
                <div id="modalTags" class="mt-6">
                </div>
            <div class="modal-footer justify-content-center">
                <a href="#" id="viewFullAnalysis" class="btn btn-primary">View Full Analysis</a>
            </div>
        </div>
    </div>
</div>
<!-- section for styles you've analyzed
<div class="style-frequency-container">
  <h2>Architectural Style Frequency</h2>
  <ul>
    <% @style_frequency.each do |style, frequency| %>
      <li><%= style %>: <%= frequency %> times</li>
    <% end %>
  </ul>
</div> REMOVE THIS--> 

        <h1>Community Building Library</h1>
        
        <!-- Button Container -->
        <div class="button-container text-center mb-4">
            <%= link_to 'Learn About a Building', architecture_explorer_new_path, class: 'btn btn-primary mr-2' %>
            <%= link_to 'Generate Architecture', step1_architecture_designer_index_path, class: 'btn btn-secondary' %>
        </div>
      
        <!-- Search Form -->
        <div class="row justify-content-center mb-4">
            <%= form_with(url: building_library_path, method: :get, local: true, class: "form-inline") do |form| %>
                <%= text_field_tag :search, params[:search], placeholder: "Search by style, e.g., Gothic Revival", class: 'form-control form-control-md mr-4 search-bar' %>
                <%= form.submit 'Search', class: 'btn btn-secondary btn-sm' %>
            <% end %>
        </div>

    <!-- Image Grid for Community Building Library -->
        <div class="image-grid">
            <% if @analyzed_buildings.present? %>
                <% @analyzed_buildings.each do |building| %>
                  <div class="grid-item" data-toggle="modal" data-target="#imagePreviewModal"
                        data-image="<%= building.image_url %>"
                        data-tags="<%= JSON.parse(building.h3_contents).join(', ') %>"
                        data-link="<%= architecture_explorer_show_path(id: building.id) %>">
                        <%= image_tag building.image_url, alt: "Building Image", class: "submission-image" %>
                        <% if building.address.present? && building.address != "N/A" %>
                            <span class="grid-btn"><%= building.address %></span>
                        <% end %>
                    </div>
                <% end %>
            <% else %>
                <p>No analyzed buildings found in the community library.</p>
            <% end %>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Event listener for 'Learn About a Building' button
            var analyzeBtn = document.getElementById('analyze-architecture-btn');
            if (analyzeBtn) {
                analyzeBtn.addEventListener('click', function() {
                    window.location.href = this.getAttribute('data-href');
                });
            }

            // Event listener for 'Generate Architecture' button
            var generateBtn = document.getElementById('generate-architecture-btn');
            if (generateBtn) {
                generateBtn.addEventListener('click', function() {
                    window.location.href = this.getAttribute('data-href');
                });
            }
        });
        $(document).ready(function() {
            $('#imagePreviewModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget); // Button that triggered the modal
                var imageUrl = button.data('image'); // Extract image URL
                var tagsString = button.data('tags'); // Extract tags
                var analysisLink = button.data('link'); // Extract link to the full analysis page

                // Update the modal's content
                var modal = $(this);
                modal.find('#modalImage').attr('src', imageUrl); // Set the image URL

                // Handle tags
                var tagsContainer = modal.find('#modalTags');
                tagsContainer.empty(); // Clear previous tags
                if (tagsString) {
                    var tagsArray = tagsString.split(','); // Split tags into an array
                    tagsArray.forEach(function(tag) {
                        tagsContainer.append('<span class="badge badge-primary">' + tag.trim() + '</span>');
                    });
                }

                // Update the 'View Full Analysis' button's href attribute
                modal.find('#viewFullAnalysis').attr('href', analysisLink);
            });
        });
    </script>
</body>
</html>